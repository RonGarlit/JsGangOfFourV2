<!DOCTYPE>
<html>

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>JsGangOFour-Factory Method Pattern</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Bootstrap CSS -->
    <%- include('partials/MainStyles') %>
        <!-- PrettyPrints CSS and JS to handle code blocks in HTML code -->
        <%- include('partials/PrettyPrint') %>

            <script src="scripts/bridge.js"></script>

</head>

<body>
    <!-- Start of Nav Section -->
    <%- include('partials/MainNavBar') %>
        <!-- End of Nav Section -->
        <br>
        <div class="container">
            <h2 title="Bridge">Bridge</h2>
            <div class="card text-white bg-secondary">
                <div class="card-body">
                    <div class="card-title">Intent according to the GoF: </div>
                    <p class="card-text">"Decouple an abstraction from its implementation so that the two can vary independently."
                    </p>
                </div>
            </div>

            <p>Bridge is a high-level architectural pattern and its main goal is to write better code through two levels of
                abstraction. It facilitates very loose coupling of objects. It is sometimes referred to as a double Adapter
                pattern.</p>

            <p>An example of the Bridge pattern is an application (the client) and a database driver (the service). The application
                writes to a well-defined database API, for example ODBC, but behind this API you will find that each driver's
                implementation is totally different for each database vendor (SQL Server, MySQL, Oracle, etc.).</p>

            <p>The Bridge pattern is a great pattern for driver development and hardware work.</p>

            <div class="card text-white bg-primary mb-3" style="max-width: 25rem;">
                <div class="card-body">
                    <h4 class="card-title">JavaScript Code</h4>
                    <p>
                        <img src="images/javascript-bridge.jpg" alt="Abstract Factory Diagram" class="img-fluid img-thumbnail">
                    </p>
                </div>
            </div>
            <p>This pattern as I have mentions and will continue to do so our descriptions are based on classic object-oriented
                programming languages and it is uses classes. Technically JavaScript doesnâ€™t have classes but you mimic interfaces
                and use prototypes to mimic classes. So when you see classes referred too know that MIMIC is the key word
                here in JavaScript. :-) </p>


            <p></p>
            <br>
            <div class="alert alert-dismissible alert-primary">
                <h4 class="alert-heading">JavaScript Code</h4>
                <div>
                    <!-- Follow these links for the google prettyify information
                    https://github.com/google/code-prettify
                    This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
                    https://github.com/google/code-prettify/blob/master/styles/desert.css -->
                    <pre class="prettyprint">
                    //==============================================
                    // bridge.js
                    //==============================================
                    // log helper
                    // Used to add() to var log
                    // then display in alert box
                    // via show() method
                    //==============================================
                    var log = (function () {
                        var log = "";
                        return {
                            add: function (msg) { log += msg + "\n"; },
                            show: function () { alert(log); log = ""; }
                        }
                    })();
                    
                    //==============================================
                    // JavaScript does not support class-based 
                    // inheritance therefore the abstract classes.
                    // we must ensure this consistency ourselves
                    // that properties and methods match!!!
                    //----------------------------------------------
                    // Note here again in OOP we would define a interface
                    // or abstract classes.   
                    //==============================================
                    
                    // I modified and extended Joseph Zimmerman's bridge pattern version, frankly 
                    // because his example of remote control was way cooler than my original example
                    // which was something lame with hand and mouse movements.  LOL :-)
                    // See his article on Bridge Pattern here:
                    // https://www.joezimjs.com/javascript/javascript-design-patterns-bridge/
                    
                    // this would be our interface or abstract class.
                    // but we can't do that.  So we are making this
                    // to be our BASE functionality for a remote control 
                    var RemoteControl = function (tv) {
                        this.tv = tv;
                        this.on = function () {
                            this.tv.on();
                        };
                        this.off = function () {
                            this.tv.off();
                        };
                        this.setChannel = function (ch) {
                            this.tv.tuneChannel(ch);
                        };
                    };
                    // this would be another interface or abstract class.
                    // but we can't do that.  So we are making this
                    // to be our base functionality for another remote control 
                    // notice this has different functionality
                    
                    /* Newer, Better Remote Control */
                    var PowerRemote = function (tv) {
                        this.tv = tv;
                        this.currChannel = 0;
                        this.setChannel = function (ch) {
                            this.currChannel = ch;
                            this.tv.tuneChannel(ch);
                        };
                        this.nextChannel = function () {
                            this.setChannel(this.currChannel + 1);
                        };
                        this.prevChannel = function () {
                            this.setChannel(this.currChannel - 1);
                        };
                    };
                    // Take the PowerRemote and add the BASE functionality
                    // of the RemoteControl
                    PowerRemote.prototype = new RemoteControl();
                    /** TV Interface
                        Since there are no Interfaces in JavaScript I am just
                        going to use comments to define what the implementors
                        should implement
                        function on
                        function off
                        function tuneChannel(channel)
                    */
                    //Set up some specific functionality for a couple TV's.
                    //----------------------------------------------
                    /* Sony TV */
                    var SonyTV = function () {
                        this.on = function () {
                            // add to log heler var 
                            log.add('Sony TV is on');
                        };
                        this.off = function () {
                            // add to log heler var 
                            log.add('Sony TV is off');
                        };
                        this.tuneChannel = function (ch) {
                            // add to log heler var 
                            log.add('Sony TV tuned to channel ' + ch);
                        };
                    }
                    /* Toshiba TV */
                    var ToshibaTV = function () {
                        this.on = function () {
                            // add to log heler var 
                            log.add('Welcome to Toshiba entertainment');
                        };
                        this.off = function () {
                            // add to log heler var 
                            log.add('Goodbye Toshiba user');
                        };
                        this.tuneChannel = function (ch) {
                            // add to log heler var 
                            log.add('Channel ' + ch + ' is set on your Toshiba television');
                        };
                    }
                    //==============================================    
                    // run_Bridge() 
                    //============================================== 
                    function run_Bridge() {
                        /* Let's see it in action */
                        // Let setup some functionality for a sony tv
                        var sony = new SonyTV();
                        // Let setup some functionality for a toshiba tv
                        var toshiba = new ToshibaTV();
                        // create a remote for sony
                        var std_remote = new RemoteControl(sony);
                        // create a remote for toshiba
                        var pwr_remote = new PowerRemote(toshiba);
                    
                        // Let put the remotes through their paces.
                        log.add("-------------------------");    
                        // add to log heler var 
                        log.add("Sony Remote Test:");
                        // add to log heler var 
                        log.add("-------------------------");
                        std_remote.on();            // prints "Sony TV is on"
                        std_remote.setChannel(55);  // prints "Sony TV tuned to channel 55"
                        std_remote.setChannel(20);  // prints "Sony TV tuned to channel 20"
                        std_remote.off();           // prints "Sony TV is off"
                    
                        log.add("");
                        log.add("-------------------------");
                        // add to log heler var 
                        log.add("Toshiba Remote Test:");
                        // add to log heler var 
                        log.add("-------------------------");
                        pwr_remote.on();            // prints "Welcome to Toshiba entertainment"
                        pwr_remote.setChannel(55);  // prints "Channel 55 is set on your Toshiba television"
                        pwr_remote.nextChannel();   // prints "Channel 56 is set on your Toshiba television"
                        pwr_remote.prevChannel();   // prints "Channel 55 is set on your Toshiba television"
                        // add to log heler var 
                        log.add("-------------------------");
                        pwr_remote.off();           // prints "Goodbye Toshiba user"
                    
                        // Display alert box from our log helper var
                        log.show();
                    
                    }
                    </pre>
                </div>
                <button type="button" class="btn btn-success" onclick="run_Bridge();return false;">Execute run_Bridge()</button>
            </div>
            <p></p>
            <br>
            <div class="alert alert-dismissible alert-primary">
                <h4 class="alert-heading">Optimized JavaScript Code</h4>
                <div>
                    <!-- Follow these links for the google prettyify information
                    https://github.com/google/code-prettify
                    This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
                    https://github.com/google/code-prettify/blob/master/styles/desert.css -->
                    <pre class="prettyprint">
                    //==============================================
                    // Optimized JavaScript Code
                    //==============================================
                    // To understand "Optimized JavaScript Code" we must
                    // review some modern javascript design patterns and techniques
                    // which the provided links cover nicely.
                    //----------------------------------------------
                    // See these links: 
                    // https://addyosmani.com/blog/essential-js-namespacing/
                    // https://www.safaribooksonline.com/library/view/learning-javascript-design/9781449334840/ch13s15.html
                    // https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc
                    // http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html
                    // http://esbueno.noahstokes.com/post/77292606977/self-executing-anonymous-functions-or-how-to-write
                    //==============================================
                    
                    var JsGangOfFour = {
                        namespace: function (name) {
                            var parts = name.split(".");
                            var ns = this;
                    
                            for (var i = 0, len = parts.length; i < len; i++) {
                                ns[parts[i]] = ns[parts[i]] || {};
                                ns = ns[parts[i]];
                            }
                    
                            return ns;
                        }
                    };
                    
                    JsGangOfFour.namespace("Classic").Bridge = (function () {
                        //==============================================
                        // JavaScript does not support class-based 
                        // inheritance therefore the abstract classes.
                        // we must ensure this consistency ourselves
                        // that properties and methods match!!!
                        //----------------------------------------------
                        // Note here again in OOP we would define a interface
                        // or abstract classes.   
                        //==============================================
                    
                        // I modified and extended Joseph Zimmerman's bridge pattern version, frankly 
                        // because his example of remote control was way cooler than my original example
                        // which was something lame with hand and mouse movements.  LOL :-)
                        // See his article on Bridge Pattern here:
                        // https://www.joezimjs.com/javascript/javascript-design-patterns-bridge/
                    
                        // ******** PRIVATE AREA ********
                        // this would be our interface or abstract class.
                        // but we can't do that.  So we are making this
                        // to be our BASE functionality for a remote control 
                        var RemoteControl = function (tv) {
                            this.tv = tv;
                            this.on = function () {
                                this.tv.on();
                            };
                            this.off = function () {
                                this.tv.off();
                            };
                            this.setChannel = function (ch) {
                                this.tv.tuneChannel(ch);
                            };
                        };
                        // this would be another interface or abstract class.
                        // but we can't do that.  So we are making this
                        // to be our base functionality for another remote control 
                        // notice this has different functionality
                    
                        /* Newer, Better Remote Control */
                        var PowerRemote = function (tv) {
                            this.tv = tv;
                            this.currChannel = 0;
                            this.setChannel = function (ch) {
                                this.currChannel = ch;
                                this.tv.tuneChannel(ch);
                            };
                            this.nextChannel = function () {
                                this.setChannel(this.currChannel + 1);
                            };
                            this.prevChannel = function () {
                                this.setChannel(this.currChannel - 1);
                            };
                        };
                        // Take the PowerRemote and add the BASE functionality
                        // of the RemoteControl
                        PowerRemote.prototype = new RemoteControl();
                        /** TV Interface
                            Since there are no Interfaces in JavaScript I am just
                            going to use comments to define what the implementors
                            should implement
                            function on
                            function off
                            function tuneChannel(channel)
                        */
                        //Set up some specific functionality for a couple TV's.
                        //----------------------------------------------
                        /* Sony TV */
                        var SonyTV = function () {
                            this.on = function () {
                                // add to log heler var 
                                log.add('Sony TV is on');
                            };
                            this.off = function () {
                                // add to log heler var 
                                log.add('Sony TV is off');
                            };
                            this.tuneChannel = function (ch) {
                                // add to log heler var 
                                log.add('Sony TV tuned to channel ' + ch);
                            };
                        }
                        /* Toshiba TV */
                        var ToshibaTV = function () {
                            this.on = function () {
                                // add to log heler var 
                                log.add('Welcome to Toshiba entertainment');
                            };
                            this.off = function () {
                                // add to log heler var 
                                log.add('Goodbye Toshiba user');
                            };
                            this.tuneChannel = function (ch) {
                                // add to log heler var 
                                log.add('Channel ' + ch + ' is set on your Toshiba television');
                            };
                        }
                        // ******** PUBLIC AREA ******** 
                        //Exposing our functions (What I like to call - Pseudo Classes
                        // because I'm OOP progreammer at heart)
                        return {
                            RemoteControl: RemoteControl,
                            PowerRemote: PowerRemote,
                            SonyTV: SonyTV,
                            ToshibaTV: ToshibaTV
                        };
                    
                    })();
                    //==============================================    
                    // run_OptimizedBridge()
                    //============================================== 
                    function run_OptimizedBridge() {
                        var bridge = JsGangOfFour.Classic.Bridge;
                        // Load our Bridge module name in the bridge var
                        var bridge = JsGangOfFour.Classic.Bridge;
                        /* Let's see it in action */
                        // Let setup some functionality for a sony tv
                        var sony = new bridge.SonyTV();
                        // Let setup some functionality for a toshiba tv
                        var toshiba = new bridge.ToshibaTV();
                        // create a remote for sony
                        var std_remote = new bridge.RemoteControl(sony);
                        // create a remote for toshiba
                        var pwr_remote = new bridge.PowerRemote(toshiba);
                    
                        // Let put the remotes through their paces.
                        log.add("=========================");
                        // add to log heler var 
                        log.add("Optimized JavaScript Code");
                        // add to log heler var 
                        log.add("=========================");
                    
                        // Let put the remotes through their paces.
                        log.add("");
                        log.add("-------------------------");
                        // add to log heler var 
                        log.add("Sony Remote Test:");
                        // add to log heler var 
                        log.add("-------------------------");
                        std_remote.on();            // prints "Sony TV is on"
                        std_remote.setChannel(55);  // prints "Sony TV tuned to channel 55"
                        std_remote.setChannel(20);  // prints "Sony TV tuned to channel 20"
                        std_remote.off();           // prints "Sony TV is off"
                    
                        log.add("");
                        log.add("-------------------------");
                        // add to log heler var 
                        log.add("Toshiba Remote Test:");
                        // add to log heler var 
                        log.add("-------------------------");
                        pwr_remote.on();            // prints "Welcome to Toshiba entertainment"
                        pwr_remote.setChannel(55);  // prints "Channel 55 is set on your Toshiba television"
                        pwr_remote.nextChannel();   // prints "Channel 56 is set on your Toshiba television"
                        pwr_remote.prevChannel();   // prints "Channel 55 is set on your Toshiba television"
                        // add to log heler var 
                        log.add("-------------------------");
                        pwr_remote.off();           // prints "Goodbye Toshiba user"
                    
                        // Display alert box from our log helper var
                        log.show();
                    
                    }
                    </pre>
                </div>
                <button type="button" class="btn btn-success" onclick="run_OptimizedBridge();return false;">Execute run_OptimizedBridge()</button>
            </div>

        </div>
        <%- include('partials/MainFooter') %>
            <!-- Optional JavaScript -->
            <!-- jQuery first, then Popper.js, then Bootstrap JS -->
            <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
                crossorigin="anonymous"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49"
                crossorigin="anonymous"></script>
            <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js" integrity="sha384-smHYKdLADwkXOn1EmN1qk/HfnUcbVRZyYmZ4qpPea6sjB/pTJ0euyQp0Mk8ck+5T"
                crossorigin="anonymous"></script>
</body>

</html>