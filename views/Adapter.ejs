<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>JsGangOFour-Factory Method Pattern</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Bootstrap CSS -->
    <%- include('partials/MainStyles') %>
        <!-- PrettyPrints CSS and JS to handle code blocks in HTML code -->
        <%- include('partials/PrettyPrint') %>

            <script src="/scripts/adapter.js"></script>

</head>

<body>
    <!-- Start of Nav Section -->
    <%- include('partials/MainNavBar') %>
        <!-- End of Nav Section -->
        <br>
        <div class="container">
            <h2 title="Adapter">Adapter</h2>
            <div class="alert alert-warning">
                <!-- <button type="button" class="close" data-dismiss="alert">&times;</button> -->
                <h4 class="alert-heading">This pattern is also known as the Wrapper Pattern.</h4>
            </div>
            <div class="card text-white bg-secondary">
                <div class="card-body">
                    <div class="card-title">Intent according to the GoF: </div>
                    <p class="card-text">"Convert the interface of a class into another interface clients expect. Adapter lets classes work together
                        that couldn't otherwise because of incompatible interfaces."
                    </p>
                </div>
            </div>
            <p>The Adapter pattern translates one interface (an object's properties and methods) to another.</p>

            <p>One scenario where Adapters are commonly used is when new components need to be integrated and work together
                with existing components in the application.</p>

            <p>Another scenario is refactoring in which parts of the program are rewritten with an improved interface, but the
                old code still expects the original interface. </p>

            <div class="card text-white bg-primary mb-3" style="max-width: 25rem;">
                <div class="card-body">
                    <h4 class="card-title">JavaScript Code</h4>
                    <p>
                        <img src="/images/javascript-adapter.jpg" alt="Abstract Factory Diagram" class="img-fluid img-thumbnail">
                    </p>
                </div>
            </div>
            <p>Creating an adapter is about creating an intermediary abstraction that translates, or maps, the old component
                to the new system. Clients call methods on the Adapter object which redirects them into calls to the legacy
                component.
            </p>


            <p></p>
            <br>
            <div class="alert alert-dismissible alert-primary">
                <h4 class="alert-heading">JavaScript Code</h4>
                <div>
                    <!-- Follow these links for the google prettyify information
                    https://github.com/google/code-prettify
                    This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
                    https://github.com/google/code-prettify/blob/master/styles/desert.css -->
                    <pre class="prettyprint">
                    //==============================================
                    // Adapter
                    // JavaScript does not support class-based 
                    // inheritance therefore the abstract classes.
                    // we must ensure this consistency ourselves
                    // that properties and methods match!!!
                    //==============================================
                    
                    // Here are old and new interfaces
                    // and adapter that is used to simulate old 
                    // functionality but hiding the new functionality
                    // without breaking things.
                    //----------------------------------------------
                    
                    // old interface
                    function Shipping() {
                        // Old interface lacks security
                        this.request = function (zipStart, zipEnd, weight) {
                            // Does a bunch of stuff ...
                            return "$49.75";
                        }
                    }
                    
                    // new interface
                    function AdvancedShipping() {
                        // Requires security something old interface didn't have
                        this.login = function (credentials) { /* ... */ };
                        // Does a bunch of stuff similar to old interface
                        // process same old data differently
                        this.setStart = function (start) { /* ... */ };
                        this.setDestination = function (destination) { /* ... */ };
                        this.calculate = function (weight) { return "$39.50"; };
                    }
                    
                    // adapter interface
                    function ShippingAdapter(credentials) {
                        var shipping = new AdvancedShipping();
                        shipping.login(credentials);
                    
                        return {
                            // create matching method like old interface
                            // with same signature of parameters and return value
                            // so it can be called the same way as old interface
                            request: function (zipStart, zipEnd, weight) {
                                shipping.setStart(zipStart);
                                shipping.setDestination(zipEnd);
                                return shipping.calculate(weight);
                            }
                        };
                    }
                    //==============================================
                    // run_Adapter()
                    //==============================================
                    function run_Adapter() {
                        // create original interface
                        var shipping = new Shipping();
                        // New evolved interface which requires credentials
                        var credentials = { token: "30a8-6ee1" };
                        var adapter = new ShippingAdapter(credentials);
                    
                        // add to log heler var 
                        log.add("Adapter Test:");
                        // original shipping object and interface
                        var cost = shipping.request("78701", "10010", "2 lbs");
                        // add to log heler var 
                        log.add("Legacy code cost: " + cost);
                        // add to log heler var 
                        log.add("-------------------------");
                        // new shipping object with adapted interface
                        cost = adapter.request("78701", "10010", "2 lbs");
                        // add to log heler var 
                        log.add("New code cost: " + cost);
                        // Display alert box from our log helper var
                        log.show();
                    }
                    </pre>
                </div>
                <button type="button" class="btn btn-success" onclick="run_Adapter();return false;">Execute run_Adapter()</button>
            </div>


            <p></p>
            <br>
            <div class="alert alert-dismissible alert-primary">
                <h4 class="alert-heading">Optimized JavaScript Code</h4>
                <div>
                    <!-- Follow these links for the google prettyify information
                    https://github.com/google/code-prettify
                    This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
                    https://github.com/google/code-prettify/blob/master/styles/desert.css -->
                    <pre class="prettyprint">
                    //==============================================
                    // Adapter
                    // JavaScript does not support class-based 
                    // inheritance or abstract classes.
                    // we must ensure this consistency ourselves
                    // that properties and methods match!!!
                    //==============================================
                    // Create our namespace called "JsGangOfFour".
                    //
                    // This is based on the NameSpace Pattern and 
                    // Module Pattern. This block of code should 
                    // be at the top of separate files to better 
                    // manage codebase.
                    //
                    // More importantly creating a structure to 
                    // avoid name collisions globally under one varable
                    // called JsGangOfFour.
                    //==============================================
                    var JsGangOfFour = {
                        namespace: function (name) {
                            var parts = name.split(".");
                            var ns = this;
                    
                            for (var i = 0, len = parts.length; i < len; i++) {
                                ns[parts[i]] = ns[parts[i]] || {};
                                ns = ns[parts[i]];
                            }
                    
                            return ns;
                        }
                    };
                    //==============================================
                    // Create the "Classic" namespace with the
                    // AbstractFactory namespace which is also in
                    // the abstractfactory.js
                    //==============================================
                    // In the namespace we have the new interface
                    // and adapter that is used to simulate old 
                    // functionality but hiding the new functionality
                    // without breaking things.
                    // *** NOTE: The old interface is NOT in the 
                    // JsGangOfFour namespaces.
                    //----------------------------------------------
                    JsGangOfFour.namespace("Classic").Adapter = (function () {
                    
                        // Private area variables and methods
                        // new interface
                        var AdvancedShipping = function () {
                            // Requires security something old interface didn't have
                            this.login = function (credentials) { /* ... */ };
                            // Does a bunch of stuff similar to old interface
                            // process same old data differently
                            this.setStart = function (start) { /* ... */ };
                            this.setDestination = function (destination) { /* ... */ };
                            this.calculate = function (weight) { return "$39.50"; };
                        }
                    
                        // adapter interface
                        var ShippingAdapter = function (credentials) {
                            var shipping = new AdvancedShipping();
                            shipping.login(credentials);
                    
                            return {
                                // create matching method like old interface
                                // with same signature of parameters and return value
                                // so it can be called the same way as old interface            
                                request: function (zipStart, zipEnd, weight) {
                                    shipping.setStart(zipStart);
                                    shipping.setDestination(zipEnd);
                                    return shipping.calculate(weight);
                                }
                            };
                        };
                        // Public area method
                        return {
                            ShippingAdapter: ShippingAdapter
                        };
                    })(); // End of JsGangOfFour.Classic.Adapter Namespace
                    //----------------------------------------------
                    // If you look in adapter.js
                    // Shipping duplicated twice in JS file 
                    // intentionally it will just replace itself.
                    // for the sake of pasting in code windows in 
                    // adapter.ejs :-)
                    //----------------------------------------------
                    // Old interface
                    var Shipping = function () {
                        this.request = function (zipStart, zipEnd, weight) {
                            // ...
                            return "$49.75";
                        }
                    }
                    //==============================================
                    // run_OptimizedAdapter()
                    //==============================================
                    function run_OptimizedAdapter() {
                        // create original interface
                        var shipping = new Shipping();
                        // New evolved interface which requires credentials
                        var credentials = { token: "30a8-6ee1" };
                        // This calls the Public area method in adapter namespace
                        var adapter = new JsGangOfFour.Classic.Adapter.ShippingAdapter(credentials);
                    
                        // add to log heler var 
                        log.add("Optimized Adapter Test:");
                        // original shipping object and interface
                        var cost = shipping.request("78701", "10010", "2 lbs");
                        // add to log heler var 
                        log.add("Legacy code cost: " + cost);
                        // add to log heler var 
                        log.add("-------------------------");
                        // new shipping object with adapted interface
                        cost = adapter.request("78701", "10010", "2 lbs");
                        // add to log heler var 
                        log.add("New code cost: " + cost);
                        // Display alert box from our log helper var
                        log.show();
                    }       
                    </pre>
                </div>
                <button type="button" class="btn btn-success" onclick="run_OptimizedAdapter();return false;">Execute run_OptimizedAdapter()</button>
            </div>

        </div>
        <%- include('partials/MainFooter') %>
            <!-- Optional JavaScript -->
            <!-- jQuery first, then Popper.js, then Bootstrap JS -->
            <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
                crossorigin="anonymous"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49"
                crossorigin="anonymous"></script>
            <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js" integrity="sha384-smHYKdLADwkXOn1EmN1qk/HfnUcbVRZyYmZ4qpPea6sjB/pTJ0euyQp0Mk8ck+5T"
                crossorigin="anonymous"></script>
</body>

</html>