<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <title>JsGangOFour</title>
  <!-- Bootstrap CSS -->

  <%- include('partials/MainStyles') %>
    <!-- PrettyPrints CSS and JS to handle code blocks in HTML code -->
    <%- include('partials/PrettyPrint') %>

      <script src="scripts/namespace.js"></script>
</head>

<body>
  <!-- Start of Nav Section -->
  <%- include('partials/MainNavBar') %>
    <!-- End of Nav Section -->
    <br />
    <div class="container">
      <h2 title="Namespace">Namespace</h2>

      <p>
        As you know, using global variables and functions is not a good way to organize your code.

        When you declare variables and functions in your JavaScript file they end up in the global object space (the
        global object called 'window' in the browser).
      </p>
      <p>
        These variables and functions become properties and methods on the global object. Built-in functions, such as,
        alert, confirm, and eval are all functions on the global object.

        What happens is that all variables and functions are added to the global object (or global namespace) creating
        the risk of name collision.
      </p>
      <p>
        Name collision occurs when variables or functions are added to the global object with the same name, essentially
        overwriting each other.

        The trouble with collision bugs is that they are extremely hard to find, especially because you don't know what
        goes on in the third party library (especially if they are minified).
      </p>
      <p>
        Here we use an earlier example from Template Method where we are using our JsGangOfFour namespace.

        There we added the Template module to our "Classic" namespace.  Followed by the Common module to our "Utils" namespace.
      </p>
      <p>
       Then you can see how we use them in the run_SampleNamespace() method.
      </p>
      </p>
      <br />
      <div class="alert alert-dismissible alert-primary">
        <h4 class="alert-heading">JavaScript Code</h4>
        <div>
          <!-- Follow these links for the google prettyify information
            https://github.com/google/code-prettify
            This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
            https://github.com/google/code-prettify/blob/master/styles/desert.css -->
          <pre class="prettyprint">


          //=============================================
          // NameSpace Pattern
          //=============================================
          // JavaScript does not support class-based 
          // inheritance or abstract classes.
          // we must ensure this consistency ourselves
          // that properties and methods match!!!
          //==============================================
          // Create our namespace called "JsGangOfFour".
          //
          // This is based on the NameSpace Pattern and 
          // Module Pattern. This block of code should 
          // be at the top of separate files to better 
          // manage codebase.
          //
          // More importantly creating a structure to 
          // avoid name collisions globally under one varable
          // called JsGangOfFour.
          //==============================================
          var JsGangOfFour = {
              namespace: function (name) {
                  var parts = name.split(".");
                  var ns = this;

                  for (var i = 0, len = parts.length; i < len; i++) {
                      ns[parts[i]] = ns[parts[i]] || {};
                      ns = ns[parts[i]];
                  }

                  return ns;
              }
          };

          //==============================================
          // Create the "Classic" namespace 
          //==============================================
          JsGangOfFour.namespace("Classic").Template = (function () {
              // Acts as our AbstractClass
              var datastore = {
                  process: function () {
                      this.connect();
                      this.select();
                      this.disconnect();
                      return true;
                  }
              };

              return { datastore: datastore };

          })();

          //==============================================
          // Create the "Utils" namespace 
          //==============================================
          JsGangOfFour.namespace("Utils").Common = (function () {

              //  inherit function helps us establish the 
              //  inheritance relationship by assigning 
              //  a base object to the prototype of a 
              //  newly created descendant object.
              var inherit = function (proto) {
                  var F = function () { };
                  F.prototype = proto;
                  return new F();
              };

              // log helper - This one is now hiden in our 
              // Common Module inside the Utils NameSpace
              var log = (function () {
                  var log = "";
                  return {
                      add: function (msg) { log += msg + "\n"; },
                      show: function () { alert(log); log = ""; }
                  }
              })();

              return {
                  inherit: inherit,
                  log: log
              };

          })();

          //=============================================
          // run_SampleNamespace()
          //=============================================
          function run_SampleNamespace() {

              var utils = JsGangOfFour.Utils.Common;

              var store = JsGangOfFour.Classic.Template.datastore;
              var mySql = utils.inherit(store);

              // implement template steps

              mySql.connect = function () {
                  utils.log.add("MySQL: connect step");
              };
              mySql.select = function () {
                  utils.log.add("MySQL: select step");
              };
              mySql.disconnect = function () {
                  utils.log.add("MySQL: disconnect step");
              };

              mySql.process();

              utils.log.show();
          }

            </pre>
        </div>
        <button type="button" class="btn btn-success" onclick="run_SampleNamespace();">
          Execute Namespace Example
        </button>
      </div>

      <div class="card text-white bg-primary mb-3" style="max-width: 25rem">
        <div class="card-body">
          <h4 class="card-title">Debug look at global variable scope</h4>
          <p>
            <img src="images/JsGangOfFourNamespace.jpg" alt="Debug Showing Namespace" class="img-fluid img-thumbnail" />
          </p>
        </div>
      </div>

    </div>

    <%- include('partials/MainFooter') %>
</body>

</html>