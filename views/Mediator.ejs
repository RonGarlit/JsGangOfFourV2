<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>JsGangOFour</title>
    <!-- Bootstrap CSS -->

    <%- include('partials/MainStyles') %>
    <!-- PrettyPrints CSS and JS to handle code blocks in HTML code -->
    <%- include('partials/PrettyPrint') %>

    <script src="scripts/mediator.js"></script>
  </head>

  <body>
    <!-- Start of Nav Section -->
    <%- include('partials/MainNavBar') %>
    <!-- End of Nav Section -->
    <br />
    <div class="container">
      <h2 title="Mediator">Mediator</h2>
      <div class="card text-white bg-secondary">
        <div class="card-body">
          <div class="card-title">Intent according to the GoF:</div>
          <p class="card-text">
            "Define an object that encapsulates how a set of objects interact.
            Mediator promotes loose coupling by keeping objects from referring
            to each other explicitly, and it lets you vary their interaction
            independently. "
          </p>
        </div>
      </div>

      <p>
        The Mediator pattern provides central authority over a group of objects
        by encapsulating how these objects interact. This model is useful for
        scenarios where there is a need to manage complex conditions in which
        every object is aware of any state change in any other object in the
        group.
      </p>
      <p>
        The Mediator patterns are useful in the development of complex forms.
        Take for example a page in which you enter options to make a flight
        reservation. A simple Mediator rule would be: you must enter a valid
        departure date, a valid return date, the return date must be after the
        departure date, a valid departure airport, a valid arrival airport, a
        valid number of travelers, and only then the Search button can be
        activated.
      </p>
      <p>
        Another example of Mediator is that of a control tower on an airport
        coordinating arrivals and departures of airplanes.
      </p>

      <div class="card text-white bg-primary mb-3" style="max-width: 25rem">
        <div class="card-body">
          <h4 class="card-title">JavaScript Code</h4>
          <p>
            <img
              src="images/javascript-mediator.jpg"
              alt="Mediator Diagram"
              class="img-fluid img-thumbnail"
            />
          </p>
        </div>
      </div>

      <p class="text-warning">
        Note: Much of the materials on this page are borrowed from a special
        architecture course by Jack Poorte that I ported with some modification.
      </p>
      
      <p>
        In the example code we have four participants that are joining in a chat
        session by registering with a <span class="cd">Chatroom</span> (the
        Mediator). Each participant is represented by a
        <span class="cd">Participant</span> object. Participants send messages
        to each other and the Chatroom handles the routing.
      </p>
      <p>
        This example is simple, but other complex rules could have been added,
        such as a 'junk filter' to protect participants from receiving junk
        messages.
      </p>

      <p></p>
      <br />
      <div class="alert alert-dismissible alert-primary">
        <h4 class="alert-heading">JavaScript Code</h4>
        <div>
          <!-- Follow these links for the google prettyify information
                    https://github.com/google/code-prettify
                    This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
                    https://github.com/google/code-prettify/blob/master/styles/desert.css -->
          <pre class="prettyprint">
  
            //==============================================
            // mediator.js
            //==============================================
            // log helper
            // Used to add() to var log
            // then display in alert box
            // via show() method
            //==============================================
            var log = (function () {
                var log = "";
                return {
                    add: function (msg) { log += msg + "\n"; },
                    show: function () { alert(log); log = ""; }
                }
            })();
            
            // Create Participant
            var Participant = function (name) {
                this.name = name;
                this.chatroom = null;
            };
            
            // Build out functionality on the prototype
            Participant.prototype = {
                send: function (message, to) {
                    this.chatroom.send(message, this, to);
                },
                receive: function (message, from) {
                    log.add(from.name + " to " + this.name + ": " + message);
                }
            };
            
            // The Chatroom is our mediator of the Participants
            var Chatroom = function () {
                var participants = {};
                return {
                    register: function (participant) {
                        participants[participant.name] = participant;
                        participant.chatroom = this;
                    },
                    send: function (message, from, to) {
                        if (to) {                       // single message
                            to.receive(message, from);
                        } else {                        // broadcast message
                            for (key in participants) {
                                if (participants[key] !== from) {
                                    participants[key].receive(message, from);
                                }
                            }
                        }
                    }
                };
            };
            
            //==============================================
            // run_Mediator
            //==============================================
            function run_Mediator() {
            
                var yoko = new Participant("Yoko");
                var john = new Participant("John");
                var paul = new Participant("Paul");
                var ringo = new Participant("Ringo");
            
                var chatroom = new Chatroom();
                chatroom.register(yoko);
                chatroom.register(john);
                chatroom.register(paul);
                chatroom.register(ringo);
            
                yoko.send("All you need is love.");
                yoko.send("I love you John.");
                john.send("Hey, no need to broadcast", yoko);
                paul.send("Ha, I heard that!");
                ringo.send("Paul, what do you think?", paul);
            
                log.show();
            }
      
                    </pre
          >
        </div>
        <button
          type="button"
          class="btn btn-success"
          onclick="run_Mediator();return false;"
        >
          Execute Mediator
        </button>
      </div>
      <p>
        The Namespace pattern is applied to keep the code out of the global
        namespace. Our namespace is
        <span class="cd">JsGangOfFour.Classic</span>. A Revealing Module named
        <span class="cd">Mediator</span> returns (i.e. reveals) a single item:
        <span class="cd">Chatroom</span>. The chatroom's
        <span class="cd">register</span> method now creates and returns the
        newly created Participant instance. This allows us to keep to code in
        the run method simple and compact.
      </p>
      <p>
        The <span class="cd">JsGangOfFour</span> object contains the
        <span class="cd">namespace</span> function which constructs namespaces
        non-destructively, that is, if a name already exists it won't overwrite
        it.
      </p>
      <p></p>
      <br />
      <div class="alert alert-dismissible alert-primary">
        <h4 class="alert-heading">Optimized JavaScript Code</h4>
        <div>
          <!-- Follow these links for the google prettyify information
                    https://github.com/google/code-prettify
                    This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
                    https://github.com/google/code-prettify/blob/master/styles/desert.css -->
          <pre class="prettyprint">
  
            //=============================================
            // Mediator NameSpace 
            //=============================================
            // JavaScript does not support class-based 
            // inheritance or abstract classes.
            // we must ensure this consistency ourselves
            // that properties and methods match!!!
            //==============================================
            // Create our namespace called "JsGangOfFour".
            //
            // This is based on the NameSpace Pattern and 
            // Module Pattern. This block of code should 
            // be at the top of separate files to better 
            // manage codebase.
            //
            // More importantly creating a structure to 
            // avoid name collisions globally under one varable
            // called JsGangOfFour.
            //==============================================
            var JsGangOfFour = {
                namespace: function (name) {
                    var parts = name.split(".");
                    var ns = this;
            
                    for (var i = 0, len = parts.length; i < len; i++) {
                        ns[parts[i]] = ns[parts[i]] || {};
                        ns = ns[parts[i]];
                    }
            
                    return ns;
                }
            };
            
            //==============================================
            // Create the "Classic" namespace 
            //==============================================
            JsGangOfFour.namespace("Classic").Mediator = (function () {
            
                // Create Participant
                var Participant = function (name) {
                    this.name = name;
                    this.chatroom = null;
                };
            
                // Build out functionality on the prototype
                Participant.prototype = {
                    send: function (message, to) {
                        this.chatroom.send(message, this, to);
                    },
                    receive: function (message, from) {
                        log.add(from.name + " to " + this.name + ": " + message);
                    }
                };
            
                // The Chatroom is our mediator of the Participants
                var Chatroom = function () {
                    var participants = {};
                    return {
                        register: function (name) {
                            var participant = new Participant(name);
                            participants[participant.name] = participant;
                            participant.chatroom = this;
            
                            return participant;
                        },
                        send: function (message, from, to) {
                            if (to) {                       // single message
                                to.receive(message, from);
                            } else {                        // broadcast message
                                for (key in participants) {
                                    if (participants[key] !== from) {
                                        participants[key].receive(message, from);
                                    }
                                }
                            }
                        }
                    };
                };
            
                return {
                    Chatroom: Chatroom
                }
            })();
            
            //==============================================
            // run_OptimizedMediator
            //==============================================
            function run_OptimizedMediator() {
            
                var chatroom = new JsGangOfFour.Classic.Mediator.Chatroom();
            
                var yoko = chatroom.register("Yoko");
                var john = chatroom.register("John");
                var paul = chatroom.register("Paul");
                var ringo = chatroom.register("Ringo");
            
                yoko.send("All you need is love.");
                yoko.send("I love you John.");
                john.send("Hey, no need to broadcast", yoko);
                paul.send("Ha, I heard that!");
                ringo.send("Paul, what do you think?", paul);
            
                log.show();
            }
            
      
                    </pre
          >
        </div>
        <button
          type="button"
          class="btn btn-success"
          onclick="run_OptimizedMediator();return false;"
        >
          Execute Optimized Mediator
        </button>
      </div>
    </div>
    <%- include('partials/MainFooter') %>
  </body>
</html>
