<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>JsGangOFour</title>
    <!-- Bootstrap CSS -->

    <%- include('partials/MainStyles') %>
        <!-- PrettyPrints CSS and JS to handle code blocks in HTML code -->
        <%- include('partials/PrettyPrint') %>

            <script src="/scripts/factorymethod.js"></script>

</head>

<body>
    <!-- Start of Nav Section -->
    <%- include('partials/MainNavBar') %>
        <!-- End of Nav Section -->
        <br>
        <div class="container">
            <h2 title="Factory Method">Factory Method</h2>
            <div class="card text-white bg-secondary">
                <div class="card-body">
                    <div class="card-title">Intent according to the GoF: </div>
                    <p class="card-text">"Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory
                        Method lets a class defer instantiation to subclasses."
                    </p>
                </div>
            </div>
            <p>The key objective of the Factory Method is extensibility.
            </p>

            <p>Factory Methods are frequently used in JavaScript applications that manage, maintain, or manipulate collections
                of objects that are different but at the same time have many characteristics (i.e. methods and properties)
                in common. </p>

            <div class="card text-white bg-primary mb-3" style="max-width: 25rem;">
                <div class="card-body">
                    <h4 class="card-title">JavaScript Code</h4>
                    <p>
                        <img src="/images/javascript-factory-method.jpg" alt="Abstract Factory Diagram" class="img-fluid img-thumbnail">
                    </p>
                </div>
            </div>

            <p>JavaScript does not support class-based inheritance therefore the abstract classes as depicted in the diagram
                are not used in the JavaScript sample code. </p>

            <p>Abstract classes and interfaces enforce consistent interfaces in derived classes. In JavaScript we must ensure
                this consistency ourselves by making sure that each 'Concrete' object has the same interface definition (i.e.
                properties and methods) as the others. </p>

            <p></p>
            <br>
            <div class="alert alert-dismissible alert-primary">
                <h4 class="alert-heading">JavaScript Code</h4>
                <div>
                    <!-- Follow these links for the google prettyify information
                    https://github.com/google/code-prettify
                    This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
                    https://github.com/google/code-prettify/blob/master/styles/desert.css -->
                    <pre class="prettyprint">
                    //==============================================
                    // Factory Method
                    // JavaScript does not support class-based 
                    // inheritance therefore the abstract classes.
                    // we must ensure this consistency ourselves
                    // that properties and methods match!!!
                    //----------------------------------------------
                    // Note here again in OOP we would define a interface
                    // or abstract classes.   
                    //==============================================
                    
                    // Here our factory creates a different vehicle 
                    // (or product) based on the type requested
                    function Factory() {
                        this.createVehicle = function (type) {
                            var employee;
                    
                            if (type === "truck") {
                                employee = new Truck();
                            } else if (type === "suv") {
                                employee = new SUV();
                            } else if (type === "sedan") {
                                employee = new Sedan();
                            } else if (type === "sportscar") {
                                employee = new SportsCar();
                            }
                    
                            employee.type = type;
                            employee.say = function () {
                                // add to log heler var 
                                log.add("The cost of each " + this.type + " is " + this.cost + ".");
                            }
                            return employee;
                        }
                    }
                    //=============================================
                    // Vehicle/Product objects we are going to build
                    //=============================================        
                    // Vehicle Objects
                    // If we could declare interfaces
                    // it be based on say the iThingamabob 
                    // here we us anonymous function
                    var Truck = function () {
                        this.cost = "$120,000";
                    };
                    var SUV = function () {
                        this.cost = "$52,000";
                    };
                    var Sedan = function () {
                        this.cost = "$35,000";
                    };
                    var SportsCar = function () {
                        this.cost = "$45,000";
                    };
                    //=============================================
                    // run_FactoryMethod()
                    //=============================================
                    function run_FactoryMethod() {
                    
                        var vehicles = [];
                    
                        var factory = new Factory();
                    
                        vehicles.push(factory.createVehicle("truck"));
                        vehicles.push(factory.createVehicle("suv"));
                        vehicles.push(factory.createVehicle("sedan"));
                        vehicles.push(factory.createVehicle("sportscar"));
                    
                        for (var i = 0, len = vehicles.length; i < len; i++) {
                            vehicles[i].say();
                        }
                        // Display alert box from our log helper var
                        log.show();
                    }
                    </pre>
                </div>
                <button type="button" class="btn btn-success" onclick="run_FactoryMethod();return false;">Execute run_FactoryMethod()</button>
            </div>


            <p></p>
            <br>
            <div class="alert alert-dismissible alert-primary">
                <h4 class="alert-heading">Optimized JavaScript Code</h4>
                <div>
                    <!-- Follow these links for the google prettyify information
                    https://github.com/google/code-prettify
                    This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
                    https://github.com/google/code-prettify/blob/master/styles/desert.css -->
                    <pre class="prettyprint">
                    //==============================================
                    // Factory Method
                    // JavaScript does not support class-based 
                    // inheritance therefore the abstract classes.
                    // we must ensure this consistency ourselves
                    // that properties and methods match!!!
                    //----------------------------------------------
                    // Note here again in OOP we would define a interface
                    // or abstract classes.   
                    //==============================================
                    
                    //==============================================
                    // Create the "Classic" namespace with the
                    // FactoryMethod namespace which is also in
                    // the factorymethod.js
                    //==============================================
                    
                    // Add our FactoryMethod Module on the "Classic" namespace
                    // of JsGangOfFour
                    var JsGangOfFour = {
                        namespace: function (name) {
                            var parts = name.split(".");
                            var ns = this;
                    
                            for (var i = 0, len = parts.length; i < len; i++) {
                                ns[parts[i]] = ns[parts[i]] || {};
                                ns = ns[parts[i]];
                            }
                    
                            return ns;
                        }
                    };
                    
                    JsGangOfFour.namespace("Classic").FactoryMethod = (function () {
                        //==============================================    
                        // Here our FactoryMethod module has the createVehicle
                        // method which we again created with an anonymous function 
                        //==============================================  
                        var createVehicle = function (type) {
                            var employee;
                    
                            if (type === "truck") {
                                employee = new Truck();
                            } else if (type === "suv") {
                                employee = new SUV();
                            } else if (type === "sedan") {
                                employee = new Sedan();
                            } else if (type === "sportscar") {
                                employee = new SportsCar();
                            }
                    
                            employee.type = type;
                            employee.say = function () {
                                // add to log heler var 
                                log.add("The cost of each " + this.type + " is " + this.cost + ".");
                            }
                            return employee;
                        };
                        //=============================================
                        // Vehicle/Product objects we are going to build
                        //=============================================        
                        // Vehicle Objects
                        // If we could declare interfaces
                        // it be based on say the iThingamabob 
                        // here we us anonymous function
                        var Truck = function () {
                            this.cost = "$135,000";
                        };
                        var SUV = function () {
                            this.cost = "$58,000";
                        };
                        var Sedan = function () {
                            this.cost = "$45,000";
                        };
                        var SportsCar = function () {
                            this.cost = "$95,000";
                        };
                    
                        return {
                            createVehicle: createVehicle
                        };
                    
                    })();
                    //=============================================
                    // run_OptimizedFactoryMethod()
                    //=============================================
                    function run_OptimizedFactoryMethod() {
                    
                        var vehicles = [];
                    
                        var factory = JsGangOfFour.Classic.FactoryMethod;
                    
                        vehicles.push(factory.createVehicle("truck"));
                        vehicles.push(factory.createVehicle("suv"));
                        vehicles.push(factory.createVehicle("sedan"));
                        vehicles.push(factory.createVehicle("sportscar"));
                    
                        for (var i = 0, len = vehicles.length; i < len; i++) {
                            vehicles[i].say();
                        }
                        // Display alert box from our log helper var
                        log.show();
                    }
                    </pre>
                </div>
                <button type="button" class="btn btn-success" onclick="run_OptimizedFactoryMethod();return false;">Execute run_OptimizedFactoryMethod()</button>
            </div>

        </div>
        <%- include('partials/MainFooter') %>

</body>

</html>