<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>JsGangOFour</title>
    <!-- Bootstrap CSS -->

    <%- include('partials/MainStyles') %>
        <!-- PrettyPrints CSS and JS to handle code blocks in HTML code -->
        <%- include('partials/PrettyPrint') %>

            <script src="/scripts/builder.js"></script>

</head>

<body>
    <!-- Start of Nav Section -->
    <%- include('partials/MainNavBar') %>
        <!-- End of Nav Section -->
        <br>
        <div class="container">
            <h2 title="Builder">Builder</h2>
            <div class="card text-white bg-secondary">
                <div class="card-body">
                    <div class="card-title">Intent according to the GoF: </div>
                    <p class="card-text">"Separate the construction of a complex object from its representation so that the same construction
                        process can create different representations."
                    </p>
                </div>
            </div>
            <p>The Builder pattern allows a client to construct a complex object by specifying the type and content only. Construction
                details are hidden entirely. Builders frequently encapsulate construction of Composite objects (another GoF
                design pattern) because the procedures involved are often repetitive and complex.</p>

            <p>In JavaScript the Builder is not used much but can be found in fluent interfaces in which multiple method calls,
                separated by dot operators that are chained together (note: fluent interfaces are implementation of the
                <a
                    href="https://www.bennadel.com/blog/2798-using-method-chaining-with-the-revealing-module-pattern-in-javascript.htm">Chaining Pattern</a>). </p>

            <p>In object-oriented programming languages like C# an AbstractBuilder would be used.</p>

            <p>However, the individual builders must implement the same multistep interface for the Director (See code below)
                to be able to step through the assembly process. </p>

            <div class="card text-white bg-primary mb-3" style="max-width: 25rem;">
                <div class="card-body">
                    <h4 class="card-title">Builder</h4>
                    <p>
                        <img src="/images/javascript-builder.jpg" alt="Abstract Factory Diagram" class="img-fluid img-thumbnail">
                    </p>
                </div>
            </div>
            <p>JavaScript does not support class-based inheritance therefore the abstract classes as depicted in the diagram
                are not used in the JavaScript sample code. </p>

            <p>Abstract classes and interfaces enforce consistent interfaces in derived classes. In JavaScript we must ensure
                this consistency ourselves by making sure that each 'Concrete' object has the same interface definition (i.e.
                properties and methods) as the others. </p>

            <p></p>
            <br>
            <div class="alert alert-dismissible alert-primary">
                <h4 class="alert-heading">JavaScript Code</h4>
                <div>
                    <!--       Follow these links for the google prettyify information
https://github.com/google/code-prettify
This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
https://github.com/google/code-prettify/blob/master/styles/desert.css -->
                    <pre class="prettyprint">
                    //==============================================
                    // Builder
                    // JavaScript does not support class-based 
                    // inheritance therefore the abstract classes.
                    // we must ensure this consistency ourselves
                    // that properties and methods match!!!
                    //----------------------------------------------
                    // Note here again in OOP we would define a interface
                    // or multiple interfaces to define the multiple steps
                    // that the builder objects need.    
                    //==============================================
                    
                    
                    // Here are three builders under control of a director: 
                    // WidgetBuilder, GadgetBuilder and ThingamajigBuilder.
                    //----------------------------------------------
                    // Manufacturing - Is our "Director" of construction using 
                    // the builders  - Created using named function
                    // The construct function accepts an instance of a "Builder" 
                    // to build the appropriate object. Say like iBuilder
                    function Manufacturing() {
                        this.construct = function (builder) {
                            builder.step1();
                            builder.step2();
                            return builder.get();
                        }
                    }
                    // Widget Builder
                    function WidgetBuilder() {
                        this.widget = null;
                        this.step1 = function () {
                            this.widget = new Widget();
                        };
                        this.step2 = function () {
                            this.widget.addParts();
                        };
                        this.get = function () {
                            return this.widget;
                        };
                    }
                    // Gadget Builder
                    function GadgetBuilder() {
                        this.gadget = null;
                        this.step1 = function () {
                            this.gadget = new Gadget();
                        };
                        this.step2 = function () {
                            this.gadget.addParts();
                        };
                        this.get = function () {
                            return this.gadget;
                        };
                    }
                    // Thingamajig Builder
                    function ThingamajigBuilder() {
                        this.thingamajig = null;
                        this.step1 = function () {
                            this.thingamajig = new Thingamajig();
                        };
                        this.step2 = function () {
                            this.thingamajig.addParts();
                        };
                        this.get = function () {
                            return this.thingamajig;
                        };
                    }
                    //=============================================
                    // Product objects we are going to build
                    //=============================================        
                    // Widget Object
                    // If we could declare interfaces
                    // it be based on say the iThingamabob interface
                    function Widget() {
                        this.buttons = 0;
                        this.addParts = function () {
                            this.buttons = 4;
                        };
                        this.say = function () {
                            // add to log heler var 
                            log.add("I am a " + this.buttons + "-button widget");
                        };
                    }
                    // Gadget Object
                    // If we could declare interfaces
                    // it be based on say the iThingamabob interface
                    function Gadget() {
                        this.buttons = 0;
                        this.addParts = function () {
                            this.buttons = 2;
                        };
                        this.say = function () {
                            // add to log heler var 
                            log.add("I am a " + this.buttons + "-button gadget");
                        };
                    }
                    // Thingamajig Object
                    // If we could declare interfaces
                    // it be based on say the iThingamabob interface
                    function Thingamajig() {
                        this.buttons = 0;
                        this.addParts = function () {
                            this.buttons = 8;
                        };
                        this.say = function () {
                            // add to log heler var 
                            log.add("I am a " + this.buttons + "-button thingamajig");
                        };
                    }
                    
                    //==============================================
                    // run_Builder()
                    //==============================================
                    function run_Builder() {
                        // Create instance of our director
                        var manufacturing = new Manufacturing();
                        // create concrete builder objects
                        var widgetBuilder = new WidgetBuilder();
                        var gadgetBuilder = new GadgetBuilder();
                        var thingamajigBuilder = new ThingamajigBuilder();
                        // Manufacture (create) the products
                        var widget = manufacturing.construct(widgetBuilder);
                        var gadget = manufacturing.construct(gadgetBuilder);
                        var thingamajig = manufacturing.construct(thingamajigBuilder);
                        // Use the products
                        widget.say();
                        gadget.say();
                        thingamajig.say();
                        // Display alert box from our log helper var
                        log.show();
                    }
                    </pre>
                </div>
                <button type="button" class="btn btn-success" onclick="run_Builder();">Execute run_Builder()</button>
            </div>


            <p></p>
            <br>
            <div class="alert alert-dismissible alert-primary">
                <h4 class="alert-heading">Optimized JavaScript Code</h4>
                <div>
                    <!-- Follow these links for the google prettyify information
                    https://github.com/google/code-prettify
                    This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
                    https://github.com/google/code-prettify/blob/master/styles/desert.css -->
                    <pre class="prettyprint">
                    //==============================================
                    // Builder
                    // JavaScript does not support class-based 
                    // inheritance therefore the abstract classes.
                    // we must ensure this consistency ourselves
                    // that properties and methods match!!!
                    //----------------------------------------------
                    // Note here again in OOP we would define a interface
                    // or multiple interfaces to define the multiple steps
                    // that the builder objects need.    
                    //==============================================
                    // Create our namespace called "JsGangOfFour".
                    //
                    // This is based on the NameSpace Pattern and 
                    // Module Pattern. This block of code should 
                    // be at the top of separate files to better 
                    // manage codebase.
                    //
                    // More importantly creating a structure to 
                    // avoid name collisions globally under one varable
                    // called JsGangOfFour.
                    //==============================================
                    var JsGangOfFour = {
                        // Look at links above for details on NameSpace pattern
                        // and this function and popular other methods to manage it.
                        namespace: function (name) {
                            var parts = name.split(".");
                            var ns = this;
                    
                            for (var i = 0, len = parts.length; i < len; i++) {
                                ns[parts[i]] = ns[parts[i]] || {};
                                ns = ns[parts[i]];
                            }
                    
                            return ns;
                        }
                    };
                    //==============================================
                    // Create the "Classic" namespace with the
                    // Builder namespace which is also in
                    // the builder.js
                    //==============================================
                    
                    // Add our Builder Module on the "Classic" namespace
                    // of JsGangOfFour
                    JsGangOfFour.namespace("Classic").Builder = (function () {
                        //==============================================    
                        // Here are three builders under control of a director: 
                        // WidgetBuilder, GadgetBuilder and ThingamajigBuilder.
                        //----------------------------------------------
                        // Manufacturing - Is our "Director" of construction using 
                        // the builders  - Created using named function
                        // The construct function accepts an instance of a "Builder" 
                        // to build the appropriate object. Say like iBuilder
                        //==============================================  
                    
                        //==============================================  
                        // This is the private area of the module.
                        // You define variables and functions which represent the 
                        // module's private state. It is off-limits to the outside world. 
                        //
                        // This is courtesy of the closure created by the function 
                        // in which the private state is maintained.
                        //==============================================     
                        var Manufacturing = function () {
                            this.construct = function (builder) {
                                builder.step1();
                                builder.step2();
                                return builder.get();
                            }
                        };
                        // WidgetBuilder Builder- Created using anonymous constructor function
                        var WidgetBuilder = function () {
                            this.widget = null;
                            this.step1 = function () {
                                this.widget = new Widget();
                            };
                            this.step2 = function () {
                                this.widget.addParts();
                            };
                            this.get = function () {
                                return this.widget;
                            }
                        };
                        // GadgetBuilder Builder- Created using anonymous constructor function
                        var GadgetBuilder = function () {
                            this.gadget = null;
                            this.step1 = function () {
                                this.gadget = new Gadget();
                            };
                            this.step2 = function () {
                                this.gadget.addParts();
                            };
                            this.get = function () {
                                return this.gadget;
                            };
                        };
                    
                        // Thingamajig Builder- Created using anonymous constructor function
                        var ThingamajigBuilder = function () {
                            this.thingamajig = null;
                            this.step1 = function () {
                                this.thingamajig = new Thingamajig();
                            };
                            this.step2 = function () {
                                this.thingamajig.addParts();
                            };
                            this.get = function () {
                                return this.thingamajig;
                            };
                        }
                    
                        //=============================================
                        // Product objects we are going to build
                        //=============================================        
                        // Widget Object- Created using anonymous constructor function
                        // If we could declare interfaces
                        // it be based on say the iThingamabob interface
                        var Widget = function () {
                            this.buttons = 0;
                            this.addParts = function () {
                                this.buttons = 4;
                            };
                            this.say = function () {
                                // add to log heler var 
                                log.add("I am a " + this.buttons + "-button widget");
                            };
                        };
                        // Gadget Object- Created using anonymous constructor function
                        // If we could declare interfaces
                        // it be based on say the iThingamabob interface
                        var Gadget = function () {
                            this.buttons = 0;
                            this.addParts = function () {
                                this.buttons = 2;
                            };
                            this.say = function () {
                                // add to log heler var 
                                log.add("I am a " + this.buttons + "-button gadget");
                            };
                        };
                        // Gadget Object- Created using anonymous constructor function
                        // If we could declare interfaces
                        // it be based on say the iThingamabob interface 
                        var Thingamajig = function () {
                            this.buttons = 0;
                            this.addParts = function () {
                                this.buttons = 8;
                            };
                            this.say = function () {
                                // add to log heler var 
                                log.add("I am a " + this.buttons + "-button thingamajig");
                            };
                        };
                        //==============================================  
                        // The public area is the returned object literal. It represents 
                        // the public interface (properties and methods) of the module 
                        // which is accessible from anywhere in the program.
                        //==============================================  
                        return {
                            Manufacturing: Manufacturing,
                            WidgetBuilder: WidgetBuilder,
                            GadgetBuilder: GadgetBuilder,
                            ThingamajigBuilder: ThingamajigBuilder
                    
                        };
                    })();
                    
                    //==============================================
                    // run_OptimizedBuilder()
                    //==============================================
                    function run_OptimizedBuilder() {
                        // Make a shorter verson of our namespace of Builder Module
                        var builder = JsGangOfFour.Classic.Builder;
                        // Create concrete instance of our director
                        var manufacturing = new builder.Manufacturing();
                        // create concrete builder objects
                        var widgetBuilder = new builder.WidgetBuilder();
                        var gadgetBuilder = new builder.GadgetBuilder();
                        var thingamagigBuilder = new builder.ThingamajigBuilder();
                        // Manufacture (create) the products
                        var widget = manufacturing.construct(widgetBuilder);
                        var gadget = manufacturing.construct(gadgetBuilder);
                        var thingamagig = manufacturing.construct(thingamagigBuilder);
                        // Use the products
                        thingamagig.say();
                        widget.say();
                        gadget.say();
                        // Display alert box from our log helper var
                        log.show();
                    }     
                    </pre>
                </div>
                <button type="button" class="btn btn-success" onclick="run_OptimizedBuilder();">Execute run_OptimizedBuilder()</button>
            </div>

        </div>
        <%- include('partials/MainFooter') %>

</body>

</html>