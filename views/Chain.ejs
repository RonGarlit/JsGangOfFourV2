<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>JsGangOFour</title>
    <!-- Bootstrap CSS -->

    <%- include('partials/MainStyles') %>
    <!-- PrettyPrints CSS and JS to handle code blocks in HTML code -->
    <%- include('partials/PrettyPrint') %>

    <script src="scripts/chainresponsibility.js"></script>
  </head>

  <body>
    <!-- Start of Nav Section -->
    <%- include('partials/MainNavBar') %>
    <!-- End of Nav Section -->
    <br />
    <div class="container">
      <h2 title="ReplaceMe">Chain of Responsibility</h2>
      <div class="card text-white bg-secondary">
        <div class="card-body">
          <div class="card-title">Intent according to the GoF:</div>
          <p class="card-text">
            "Avoid coupling the sender of a request to its receiver by giving
            more than one object a chance to handle the request. Chain the
            receiving objects and pass the request along the chain until an
            object handles it."
          </p>
        </div>
      </div>

      <p>
        The Chain of Responsibility pattern provides a chain of loosely coupled
        objects one of which can satisfy a request. This pattern is essentially
        a linear search for an object that can handle a particular request.
      </p>

      <p>
        An example of a chain-of-responsibility is event-bubbling in which an
        event propagates through a series of nested controls one of which may
        choose to handle the event.
      </p>

      <p>
        The Chain of Responsiblity patterns is related to the Chaining Pattern
        which is frequently used in JavaScript (jQuery makes extensive use of
        this pattern). To learn more about the Chaining patterns view the Modern
        Patterns section.
      </p>

      <p>ReplaceMe</p>

      <div class="card text-white bg-primary mb-3" style="max-width: 25rem">
        <div class="card-body">
          <h4 class="card-title">Chain of Responsibility</h4>
          <p>
            <img
              src="images/javascript-chain-of-responsibility.jpg"
              alt="Chain of Responsibility Diagram"
              class="img-fluid img-thumbnail"
            />
          </p>
        </div>
      </div>
      <p class="text-warning">
        Note: Much of the materials on this page are borrowed from a special
        architecture course by Jack Poorte that I ported with some modification.
      </p>
      <p>
        This example differs slightly from the classic Chain of Responsibility
        pattern in that not one, but all handlers participate in handling the
        request.
      </p>

      <p>
        The code demonstrates an elegant solution to a money dispensing machine
        problem. Say, a customer requires $247 from an ATM machine. What is the
        combination of bank notes ($100, $50, $20, $10, $5, $1) that satisfies
        that request?
      </p>

      <p>
        A Request is created with the amount requested. Next, a series of get
        calls are chained together, each one handling a particular denomination.
        Each handler determines the number of bank notes dispensed and
        substracts this amount from the remaining amount. The request object is
        passed through the chain by returning this in the get method.
      </p>

      <p></p>
      <br />
      <div class="alert alert-dismissible alert-primary">
        <h4 class="alert-heading">JavaScript Code</h4>
        <div>
          <!-- Follow these links for the google prettyify information
                    https://github.com/google/code-prettify
                    This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
                    https://github.com/google/code-prettify/blob/master/styles/desert.css -->
          <pre class="prettyprint">
  
            //==============================================
            // chainresponsibility.js
            //==============================================
            // log helper
            // Used to add() to var log
            // then display in alert box
            // via show() method
            //==============================================
            var log = (function () {
                var log = "";
                return {
                    add: function (msg) { log += msg + "\n"; },
                    show: function () { alert(log); log = ""; }
                }
            })();
            
            // Request is created 
            var Request = function (amount) {
                this.amount = amount;
            
                log.add("Requested: $" + amount + "\n");
            }
            // The get method is added to the pototype
            Request.prototype = {
                get: function (bill) {
                    var count = Math.floor(this.amount / bill);
                    this.amount -= count * bill;
            
                    log.add("Dispense " + count + " $" + bill + " bills");
            
                    return this;
                }
            }
            
            //=============================================
            // run_chain()
            //=============================================
            function run_chain() {
            
                // the Request is created with the amount requested
                var request = new Request(378);
                // Next, a series of get calls are chained together, each one 
                // handling a particular denomination. The request object is 
                // passed through the chain by returning this in the get method.
                request.get(100).get(50).get(20).get(10).get(5).get(1);
            
                log.show();
            }
      
                    </pre
          >
        </div>
        <button
          type="button"
          class="btn btn-success"
          onclick="run_Chain();return false;"
        >
          Execute Chain Of Responsibility
        </button>
      </div>
      <p>
        The Namespace pattern is applied to keep the code out of the global
        namespace. Our namespace is named Patterns.Classic. A Revealing Module
        named Chain returns (i.e. reveals) only a single item: the Request
        constructor function and its prototype by association.
      </p>

      <p>
        The Patterns object contains the namespace function which constructs
        namespaces non-destructively, that is, if a name already exists it won't
        overwrite it.
      </p>

      <p></p>
      <br />
      <div class="alert alert-dismissible alert-primary">
        <h4 class="alert-heading">Optimized JavaScript Code</h4>
        <div>
          <!-- Follow these links for the google prettyify information
                    https://github.com/google/code-prettify
                    This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
                    https://github.com/google/code-prettify/blob/master/styles/desert.css -->
          <pre class="prettyprint">
  
            //=============================================
            // Chain NameSpace 
            //=============================================
            // JavaScript does not support class-based 
            // inheritance or abstract classes.
            // we must ensure this consistency ourselves
            // that properties and methods match!!!
            //==============================================
            // Create our namespace called "JsGangOfFour".
            //
            // This is based on the NameSpace Pattern and 
            // Module Pattern. This block of code should 
            // be at the top of separate files to better 
            // manage codebase.
            //
            // More importantly creating a structure to 
            // avoid name collisions globally under one varable
            // called JsGangOfFour.
            //==============================================
            var JsGangOfFour = {
                namespace: function (name) {
                    var parts = name.split(".");
                    var ns = this;
            
                    for (var i = 0, len = parts.length; i < len; i++) {
                        ns[parts[i]] = ns[parts[i]] || {};
                        ns = ns[parts[i]];
                    }
            
                    return ns;
                }
            };
            
            //==============================================
            // Create the "Classic" namespace 
            //==============================================
            JsGangOfFour.namespace("Classic").Chain = (function () {
                // Request is created 
                var Request = function (amount) {
                    this.amount = amount;
            
                    log.add("Requested: $" + amount + "\n");
                }
                // The get method is added to the pototype
                Request.prototype = {
                    get: function (bill) {
                        var count = Math.floor(this.amount / bill);
                        this.amount -= count * bill;
            
                        log.add("Dispense " + count + " $" + bill + " bills");
            
                        return this;
                    }
                }
            
                return {
                    Request: Request
                }
            })();
            
            
            //=============================================
            // run_OptimizedChain()
            //=============================================
            function run_OptimizedChain() {
            
                var chain = JsGangOfFour.Classic.Chain;
                // the Request is created with the amount requested
                var request = new chain.Request(378);
                // Next, a series of get calls are chained together, each one 
                // handling a particular denomination. The request object is 
                // passed through the chain by returning this in the get method.
                request.get(100).get(50).get(20).get(10).get(5).get(1);
            
                log.show();
            }
      
                    </pre
          >
        </div>
        <button
          type="button"
          class="btn btn-success"
          onclick="run_OptimizedChain();return false;"
        >
          Execute Optimized Chain Of Responsibility
        </button>
      </div>
    </div>
    <%- include('partials/MainFooter') %>
  </body>
</html>
