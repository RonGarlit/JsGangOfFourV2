<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>JsGangOFour</title>
    <!-- Bootstrap CSS -->

    <%- include('partials/MainStyles') %>
    <!-- PrettyPrints CSS and JS to handle code blocks in HTML code -->
    <%- include('partials/PrettyPrint') %>

    <script src="scripts/proxy.js"></script>
  </head>

  <body>
    <!-- Start of Nav Section -->
    <%- include('partials/MainNavBar') %>
    <!-- End of Nav Section -->
    <br />
    <div class="container">
      <h2 title="ReplaceMe">Proxy</h2>
      <div class="card text-white bg-secondary">
        <div class="card-body">
          <div class="card-title">Intent according to the GoF:</div>
          <p class="card-text">
            "Provide a surrogate or placeholder for another object to control
            access to it."
          </p>
        </div>
      </div>

      <p>
        The Proxy pattern provides a surrogate or placeholder object for another
        object and controls access to this other object
      </p>

      <p>
        In object-oriented programming, objects do the work they advertise
        through their interface (properties and methods). Clients of these
        objects expect this work to be done quickly and efficiently. However,
        there are situations where an object is severely constrained and cannot
        live up to its responsibility.
      </p>

      <p>
        Typically this occurs when there is a dependency on a remote resource
        (resulting in network latency) or when an object takes a long time to
        load.
      </p>

      <p>
        In situations like these you apply the Proxy pattern and create a proxy
        object that ‘stands in’ for the original object. The Proxy forwards the
        request to a target object. The interface of the Proxy object is the
        same as the original object and clients may not even be aware they are
        dealing with a proxy rather than the real object
      </p>

      <div class="card text-white bg-primary mb-3" style="max-width: 25rem">
        <div class="card-body">
          <h4 class="card-title">Proxy</h4>
          <p>
            <img
              src="images/javascript-proxy.jpg"
              alt="Abstract Factory Diagram"
              class="img-fluid img-thumbnail"
            />
          </p>
        </div>
      </div>
      <p class="text-warning">
        Note: Much of the materials on this page are borrowed from a special
        architecture course by Jack Poorte with some modification.
      </p>
      <p>
        The GeoCoder object simulates the Google Maps Geocoding service. In
        geocoding you provide a location (a place on the earth) and it will
        return its latitude/longitude (latlng). Our GeoCoder can resolve only 4
        locations, but in reality there are millions, because it involves
        countries, cities, and streets.
      </p>

      <p>
        The programmer decided to implement a Proxy object because GeoCoder is
        relatively slow. The proxy object is called GeoProxy. It is known that
        many repeated requests (for the same location) are coming in. To speed
        things up GeoProxy caches frequently requested locations. If a location
        is not already cached it goes out to the real GeoCoder service and
        stores the results in cache.
      </p>

      <p>
        Several city locations are queried and many of these are for the same
        city. GeoProxy builds up its cache while supporting these calls. At the
        end GeoProxy< has processed 11 requests but had to go out to GeoCoder
        only 3 times. Notice that the client program has no knowledge about the
        proxy object (it calls the same interface with the standard getLatLng
        method).
      </p>

      <p></p>
      <br />
      <div class="alert alert-dismissible alert-primary">
        <h4 class="alert-heading">JavaScript Code</h4>
        <div>
          <!-- Follow these links for the google prettyify information
                    https://github.com/google/code-prettify
                    This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
                    https://github.com/google/code-prettify/blob/master/styles/desert.css -->
          <pre class="prettyprint">
  
            //==============================================
            // proxy.js
            //==============================================
            // log helper
            // Used to add() to var log
            // then display in alert box
            // via show() method
            //==============================================
            var log = (function () {
                var log = "";
                return {
                    add: function (msg) { log += msg + "\n"; },
                    show: function () { alert(log); log = ""; }
                }
            })();
            
            // Simulated Google Maps Geocoding Service
            function GeoCoder() {
                this.getLatLng = function (address) {
            
                    if (address === "Amsterdam") {
                        return "52.3700° N, 4.8900° E";
                    } else if (address === "London") {
                        return "51.5171° N, 0.1062° W";
                    } else if (address === "Paris") {
                        return "48.8742° N, 2.3470° E";
                    } else if (address === "Berlin") {
                        return "52.5233° N, 13.4127° E";
                    } else {
                        return "";
                    }
                };
            }
            
            // Our Application's Proxy for the Simulated Google Maps Geocoding Service
            function GeoProxy() {
                var geocoder = new GeoCoder();
                var geocache = {};
            
                return {
                    getLatLng: function (address) {
                        if (!geocache[address]) {
                            geocache[address] = geocoder.getLatLng(address);
                        }
            
                        log.add(address + ": " + geocache[address]);
                        return geocache[address];
                    },
                    getCount: function () {
                        var count = 0;
                        for (var code in geocache) { count++; }
                        return count;
                    }
                };
            };
            
            //=============================================
            // run_proxy()
            //=============================================
            function run_proxy() {
            
                var geo = new GeoProxy();
            
                // geolocation requests
                geo.getLatLng("Paris");
                geo.getLatLng("London");
                geo.getLatLng("London");
                geo.getLatLng("London");
                geo.getLatLng("London");
                geo.getLatLng("Amsterdam");
                geo.getLatLng("Amsterdam");
                geo.getLatLng("Amsterdam");
                geo.getLatLng("Amsterdam");
                geo.getLatLng("London");
                geo.getLatLng("London");
            
                log.add("\nCache size: " + geo.getCount());
                log.show();
            }
      
            </pre
          >
        </div>
        <button
          type="button"
          class="btn btn-success"
          onclick="run_proxy();return false;"
        >
          Execute Proxy Example
        </button>
      </div>
      <p>
        The Namespace pattern is applied to keep the code out of the global
        namespace. Our namespace is Patterns.Classic. A Revealing Module named
        Proxy returns (i.e. reveals) only a single item: the Geo constructor
        function which in turn supports two public methods: getLatLng and
        getCount.
      </p>

      <p>
        The public GeoCoder interface remains public because it simulates Google
        Maps geocoding functionality.
      </p>

      <p>
        The Patterns object contains the namespace function which constructs
        namespaces non-destructively, that is, if a name already exists it won't
        overwrite it.
      </p>

      <p></p>
      <br />
      <div class="alert alert-dismissible alert-primary">
        <h4 class="alert-heading">Optimized JavaScript Code</h4>
        <div>
          <!-- Follow these links for the google prettyify information
                    https://github.com/google/code-prettify
                    This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
                    https://github.com/google/code-prettify/blob/master/styles/desert.css -->
          <pre class="prettyprint">
            //=============================================
            // Proxy NameSpace 
            //=============================================
            // JavaScript does not support class-based 
            // inheritance or abstract classes.
            // we must ensure this consistency ourselves
            // that properties and methods match!!!
            //==============================================
            // Create our namespace called "JsGangOfFour".
            //
            // This is based on the NameSpace Pattern and 
            // Module Pattern. This block of code should 
            // be at the top of separate files to better 
            // manage codebase.
            //
            // More importantly creating a structure to 
            // avoid name collisions globally under one varable
            // called JsGangOfFour.
            //==============================================
            var JsGangOfFour = {
                namespace: function (name) {
                    var parts = name.split(".");
                    var ns = this;
            
                    for (var i = 0, len = parts.length; i < len; i++) {
                        ns[parts[i]] = ns[parts[i]] || {};
                        ns = ns[parts[i]];
                    }
            
                    return ns;
                }
            };
            
            //==============================================
            // Create the "Classic" namespace 
            //==============================================
            JsGangOfFour.namespace("Classic").Proxy = (function () {
            
                var Geo = function () {
                    var geocoder = new GeoCoder();
                    var geocache = {};
            
                    return {
                        getLatLng: function (address) {
                            if (!geocache[address]) {
                                geocache[address] = geocoder.getLatLng(address);
                            }
            
                            log.add(address + ": " + geocache[address]);
                            return geocache[address];
                        },
                        getCount: function () {
                            var count = 0;
                            for (var code in geocache) { count++; }
                            return count;
                        }
                    };
                };
            
                return {
                    Geo: Geo
                };
            })();
            
            // Simulated Google Maps Geocoding Service
            function GeoCoder() {
                this.getLatLng = function (address) {
            
                    if (address === "Amsterdam") {
                        return "52.3700° N, 4.8900° E";
                    } else if (address === "London") {
                        return "51.5171° N, 0.1062° W";
                    } else if (address === "Paris") {
                        return "48.8742° N, 2.3470° E";
                    } else if (address === "Berlin") {
                        return "52.5233° N, 13.4127° E";
                    } else {
                        return "";
                    }
                };
            }
            
            //=============================================
            // run_OptimizedProxy()
            //=============================================
            function run_OptimizedProxy() {
            
                var proxy = JsGangOfFour.Classic.Proxy;
            
                var geo = new proxy.Geo();
            
                // geolocation requests
                geo.getLatLng("Paris");
                geo.getLatLng("London");
                geo.getLatLng("London");
                geo.getLatLng("London");
                geo.getLatLng("London");
                geo.getLatLng("Amsterdam");
                geo.getLatLng("Amsterdam");
                geo.getLatLng("Amsterdam");
                geo.getLatLng("Amsterdam");
                geo.getLatLng("London");
                geo.getLatLng("London");
            
                log.add("\nCache size: " + geo.getCount());
                log.show();
            
            }
                    </pre
          >
        </div>
        <button
          type="button"
          class="btn btn-success"
          onclick="run_OptimizedProxy();return false;"
        >
          Execute Optimized Proxy Example
        </button>
      </div>
    </div>

    <%- include('partials/MainFooter') %>
  </body>
</html>
