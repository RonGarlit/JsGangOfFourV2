<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>JsGangOFour-Abstract Factory Pattern</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Bootstrap CSS -->
    <%- include('partials/MainStyles') %>
        <!-- PrettyPrints CSS and JS to handle code blocks in HTML code -->
        <%- include('partials/PrettyPrint') %>

            <!-- load JavaScript code supporting this page -->
            <script src="/scripts/abstractfactory.js"></script>

</head>

<body>
    <!-- Start of Nav Section -->
    <%- include('partials/MainNavBar') %>
        <!-- End of Nav Section -->
        <br>
        <div class="container">
            <h2 title="Abstract Factory">Abstract Factory</h2>
            <div class="card text-white bg-secondary">
                <div class="card-body">
                    <div class="card-title">Intent according to the GoF: </div>
                    <p class="card-text">"Provide an interface for creating families of related or dependent objects without specifying their
                        concrete classes."
                    </p>
                </div>
            </div>
            <p>An Abstract Factory creates objects that are related by a common theme. </p>

            <p>In object-oriented programming languages like C#, a Factory is an object that creates other objects. An Abstract
                Factory has abstracted out a theme, which is shared by the newly created objects.</p>

            <div class="card text-white bg-primary mb-3" style="max-width: 25rem;">
                <div class="card-body">
                    <h4 class="card-title">Abstract Factory</h4>
                    <p>
                        <img src="/images/javascript-abstract-factory.jpg" alt="Abstract Factory Diagram" class="img-fluid img-thumbnail">
                    </p>
                </div>
            </div>

            <p>JavaScript does not support class-based inheritance therefore the abstract classes as depicted in the diagram
                are not used in the JavaScript sample code. </p>

            <p>Abstract classes and interfaces enforce consistent interfaces in derived classes. In JavaScript we must ensure
                this consistency ourselves by making sure that each 'Concrete' object has the same interface definition (i.e.
                properties and methods) as the others. </p>


            <p></p>
            <br>
            <div class="alert alert-dismissible alert-primary">
                <h4 class="alert-heading">JavaScript Code</h4>
                <div>
                    <!-- Follow these links for the google prettyify information
                    https://github.com/google/code-prettify
                    This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
                    https://github.com/google/code-prettify/blob/master/styles/desert.css -->
                    <pre class="prettyprint">
                    //==============================================                        
                    // log helper
                    // Used to add() to var log
                    // then display in alert box
                    // via show() method
                    //==============================================
                    var log = (function () {
                        var log = "";
                        return {
                            add: function (msg) { log += msg + "\n"; },
                            show: function () { alert(log); log = ""; }
                        }
                    })();
                    
                    //==============================================
                    // Abstract Factory
                    // JavaScript does not support class-based 
                    // inheritance therefore the abstract classes.
                    // we must ensure this consistency ourselves
                    // that properties and methods match!!!
                    //==============================================
                    
                    
                    // Here are two Factories: 
                    // EmployeeFactory and VendorFactory.
                    //----------------------------------------------
                    // Employee Factory - Created using named function
                    function EmployeeFactory() {
                        this.create = function (name) {
                            return new Employee(name);
                        };
                    }
                    // Employee Object  
                    // If we could declare interfaces
                    // it would be the iPerson
                    function Employee(name) {
                        this.name = name;
                        this.say = function () {
                            // add to log heler var 
                            log.add("I am employee " + name);
                        };
                    }
                    
                    // Vendor Factory
                    function VendorFactory() {
                        this.create = function (name) {
                            return new Vendor(name);
                        };
                    }
                    // Vendor Object
                    // If we could declare interfaces
                    // it would be the iPerson
                    function Vendor(name) {
                        this.name = name;
                        this.say = function () {
                            // add to log heler var 
                            log.add("I am vendor " + name);
                        };
                    }
                    //==============================================
                    // run_AbstractFactory() 
                    //----------------------------------------------
                    // Demo use of EmployeeFactory & VendorFactory
                    // and log to alert box.
                    //==============================================
                    function run_AbstractFactory() {
                    
                        // Array of matching entity object types
                        // If we could declare interfaces
                        // it would be the iPerson
                        // and this woud be and array of 
                        // Persons or People :-)
                        var persons = [];
                    
                        // Create a couple factories
                        var employeeFactory = new EmployeeFactory();
                        var vendorFactory = new VendorFactory();
                    
                        // Load the array with objects created by factories
                        // Names from http://funnynames.com/  :-)
                        persons.push(employeeFactory.create("Anita Potty"));
                        persons.push(employeeFactory.create("Pete Moss"));
                        persons.push(employeeFactory.create("Belle E. Flopp"));
                        persons.push(employeeFactory.create("Tyron Shulaces"));
                    
                        persons.push(vendorFactory.create("Heaven Lee"));
                        persons.push(vendorFactory.create("Al K. Holic"));
                        persons.push(vendorFactory.create("Lotta Hare"));
                        persons.push(vendorFactory.create("Seymoure Butts"));
                    
                        for (var i = 0, len = persons.length; i < len; i++) {
                            persons[i].say();
                        }
                    
                        // Display alert box from our log helper var
                        log.show();
                    }
                </pre>
                </div>
                <button type="button" class="btn btn-success" onclick="run_AbstractFactory();return false;">Execute run_AbstractFactory()</button>
            </div>

            <p></p>
            <br>
            <div class="alert alert-dismissible alert-primary">
                <h4 class="alert-heading">Optimized JavaScript Code</h4>
                <div>
                    <!-- Follow these links for the google prettyify information
                    https://github.com/google/code-prettify
                    This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
                    https://github.com/google/code-prettify/blob/master/styles/desert.css -->
                    <pre class="prettyprint">
                    //==============================================
                    // Abstract Factory
                    // JavaScript does not support class-based 
                    // inheritance or abstract classes.
                    // we must ensure this consistency ourselves
                    // that properties and methods match!!!
                    //==============================================
                    // Create our namespace called "JsGangOfFour ".
                    //
                    // This is based on the NameSpace Pattern and 
                    // Module Pattern. This block of code should 
                    // be at the top of separate files to better 
                    // manage codebase.
                    //
                    // More importantly creating a structure to 
                    // avoid name collisions globally under one varable
                    // called JsGangOfFour.
                    //==============================================
                    var JsGangOfFour = {
                        namespace: function (name) {
                            var parts = name.split(". ");
                            var ns = this;
                    
                            for (var i = 0, len = parts.length; i < len; i++) {
                                ns[parts[i]] = ns[parts[i]] || {};
                                ns = ns[parts[i]];
                            }
                    
                            return ns;
                        }
                    };
                    //==============================================
                    // Create the "Classic " namespace with the
                    // AbstractFactory namespace which is also in
                    // the abstractfactory.js
                    //==============================================
                    
                    // This is our AbstractFactory that will return two factories
                    // called FamilyFactory and PetFactory  :-)
                    JsGangOfFour.namespace("Classic ").AbstractFactory = (function () {
                        // Here are two entity objects 
                        // If we could declare interfaces and abstract classes
                        // it would be iMember or iFamilyMember and so on.
                        //----------------------------------------------
                        // Family Function Object - Created using anonymous constructor function
                        var Family = function (name) {
                            this.name = name;
                            this.say = function () {
                                // add to log heler var that is
                                // declared in the top of abstractfactory.js
                                log.add("My family member name is " + name);
                            };
                        };
                        // Pet Function Object - Created using anonymous constructor function
                        var Pet = function (name) {
                            this.name = name;
                            this.say = function () {
                                // add to log heler var that is
                                // declared in the top of abstractfactory.jss
                                log.add("I 'm a pet named " + name);
                            };
                        };
                        // Here are two Factories: 
                        // FamilyFactory and PetFactory.
                        // This uses our resuable objects as a base to 
                        // create other objects.
                        // Again we use the anonymous constructor function
                        // in creating out factory object simulating a OOP Class
                        //----------------------------------------------
                        // Family Factory Function Object - Created using anonymous constructor function
                        var FamilyFactory = function () {
                            this.create = function (name) {
                                return new Family(name);
                            };
                        };
                        // Pet Factory Function Object - Created using anonymous constructor function
                        var PetFactory = function () {
                            this.create = function (name) {
                                return new Pet(name);
                            };
                        };
                    
                        return {
                            FamilyFactory: FamilyFactory,
                            PetFactory: PetFactory
                        };
                    })();
                    
                    //==============================================
                    // run_OptimizedAbstractFactory()
                    //----------------------------------------------
                    // Demo use of EmployeeFactory & VendorFactory
                    // and log to alert box.
                    //==============================================
                    function run_OptimizedAbstractFactory() {
                        // Load our Abstract Factory in the abstract var
                        var abstract = JsGangOfFour.Classic.AbstractFactory;
                        // Create a couple factories new'ing up the // factory functions in our abstract of // AbstractFactory
                    Namespace. var familyFactory=n ew abstract.FamilyFactory(); var petFactory=n ew abstract.PetFactory(); //
                    Array of matching entity object types // If we could declare interfaces // it would be the iPerson // and
                    this woud be and array of // Persons or People :-) var persons=[ ]; // Load the array with objects created
                    by factories persons.push(familyFactory.create( "Ron Garlit")); persons.push(familyFactory.create(
                    "Cindi Garlit")); persons.push(familyFactory.create( "Devin Garlit")); persons.push(familyFactory.create(
                    "Melissa Garlit")); persons.push(familyFactory.create( "Mark Garlit")); persons.push(petFactory.create( "Molly Garlit"));
                    persons.push(petFactory.create( "Max Garlit")); persons.push(petFactory.create( "Jax Garlit")); for (var
                    i=0 , len=p ersons.length; i < len; i++) { persons[i].say(); } // Display alert box from our log helper var
                // declared in the top of abstractfactory.js log.show(); } </pre>
                </div>
                <button type="button" class="btn btn-success" onclick="run_OptimizedAbstractFactory();return false;">Execute run_OptimizedAbstractFactory()</button>
            </div>

        </div>
        <%- include('partials/MainFooter') %>

</body>

</html>