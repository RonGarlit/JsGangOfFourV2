<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <title>JsGangOFour</title>
  <!-- Bootstrap CSS -->

  <%- include('partials/MainStyles') %>
    <!-- PrettyPrints CSS and JS to handle code blocks in HTML code -->
    <%- include('partials/PrettyPrint') %>

      <script src="scripts/module.js"></script>
</head>

<body>
  <!-- Start of Nav Section -->
  <%- include('partials/MainNavBar') %>
    <!-- End of Nav Section -->
    <br />
    <div class="container">
      <h2 title="Revealing Module">Revealing Module</h2>
      <p>
        JavaScript does not support access modifiers. By default all properties and methods are public, meaning they are
        accessible by anyone in the program.
      </p>

      <p>
        This is not always desirable, but fortunately, a number of techniques and
        patterns have been developed over the last few years that allow you to protect and encapsulate the data in your
        objects.

      </p>

      <p>
        All these are based on the concept of function closure which will be discussed shortly.
      </p>

      <p>
        The main take-away for now is that data encapsulation is one of the core principles in OO and is also very
        important to JavaScript.
      </p>
      <p>
        The Module pattern is a creational and structural design pattern which provides a way of encapsulating private
        members while producing a public API. This is accomplished by creating an IIFE which allows us to define
        variables only available in its scope (through closure) while returning an object which contains the public API.
      </p>


      <div class="card text-white bg-primary mb-3">
        <div class="card-body">
          <h4 class="card-title">"This" and "Closure" in use</h4>
          <p>
            <img src="images/Closure01.jpg" alt="This and Closure" class="img-fluidimg img-thumbnail" />
          </p>
        </div>
      </div>
      <p>
        This gives us a clean solution for hiding the main logic and only exposing an interface we wish other parts of
        our application to use.
      </p>
      <br />
      <div class="alert alert-dismissible alert-primary">
        <h4 class="alert-heading">JavaScript Code</h4>
        <div>
          <!-- Follow these links for the google prettyify information
            https://github.com/google/code-prettify
            This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
            https://github.com/google/code-prettify/blob/master/styles/desert.css -->
          <pre class="prettyprint">

            //=============================================
            // Revealing Module Pattern
            //=============================================
            // JavaScript does not support class-based 
            // inheritance or abstract classes.
            // we must ensure this consistency ourselves
            // that properties and methods match!!!
            //==============================================
            // Create our namespace called "JsGangOfFour".
            //
            // This is based on the NameSpace Pattern and 
            // Module Pattern. This block of code should 
            // be at the top of separate files to better 
            // manage codebase.
            //
            // More importantly creating a structure to 
            // avoid name collisions globally under one varable
            // called JsGangOfFour.
            //==============================================
            var JsGangOfFour = {
                namespace: function (name) {
                    var parts = name.split(".");
                    var ns = this;
            
                    for (var i = 0, len = parts.length; i < len; i++) {
                        ns[parts[i]] = ns[parts[i]] || {};
                        ns = ns[parts[i]];
                    }
            
                    return ns;
                }
            };
            
            //==============================================
            // Create the "Classic" namespace 
            //==============================================
            JsGangOfFour.namespace("Classic").Template = (function () {
                // Acts as our AbstractClass
                var datastore = {
                    process: function () {
                        this.connect();
                        this.select();
                        this.disconnect();
                        return true;
                    }
                };
            
                return { datastore: datastore };
            
            })();
            
            //==============================================
            // Create the "Utils" namespace 
            //==============================================
            // Note that the Common module here is using 
            // the revealing Module Pattern
            //
            // This Module pattern makes use of 
            // immediate anonymous functions and closures.
            //==============================================
            JsGangOfFour.namespace("Utils").Common = (function () {
            
                //==============================================
                // Private Area
                //==============================================
            
                var inherit = function (proto) {
                    var F = function () { };
                    F.prototype = proto;
                    return new F();
                };
            
                // log helper - This one is now hidden in our 
                // Common Module inside the Utils NameSpace
                var log = (function () {
                    var log = "";
                    return {
                        add: function (msg) { log += msg + "\n"; },
                        show: function () { alert(log); log = ""; }
                    }
                })();
            
                return {
            
                    //==============================================
                    // Public Area
                    //==============================================
                    // Note I used the same name here for the public 
                    // method but it is not required.
                    //==============================================
                    inherit: inherit,   // revealing method
                    log: log            // revealing method
                };
            
            })();
            
            //=============================================
            // run_RevealingModule()
            //=============================================
            function run_RevealingModule() {
            
                // Assign a few variable here with items 
                // from our modules these will run faster too 
                var utils = JsGangOfFour.Utils.Common;
            
                var store = JsGangOfFour.Classic.Template.datastore;
                // Setup MySql with the public inherit from Common module 
                var mySql = utils.inherit(store);
            
                // implement template steps
                mySql.connect = function () {
                    utils.log.add("MySQL: connect step");
                };
                mySql.select = function () {
                    utils.log.add("MySQL: select step");
                };
                mySql.disconnect = function () {
                    utils.log.add("MySQL: disconnect step");
                };
            
                mySql.process();
            
                utils.log.show();
            }

            </pre>
        </div>
        <button type="button" class="btn btn-success" onclick="run_RevealingModule();">
          Execute Revealing Module
        </button>
      </div>

      <div class="card text-white bg-primary mb-3" style="max-width: 25rem">
        <div class="card-body">
          <h4 class="card-title">Debug look at global variable scope</h4>
          <p>
            <img src="images/RevealingMod01.jpg" alt="Revealing Module in Namespace" class="img-fluid img-thumbnail" />
          </p>
        </div>
      </div>

    </div>

    <%- include('partials/MainFooter') %>
</body>

</html>