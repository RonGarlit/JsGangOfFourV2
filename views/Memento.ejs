<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>JsGangOFour</title>
    <!-- Bootstrap CSS -->

    <%- include('partials/MainStyles') %>
    <!-- PrettyPrints CSS and JS to handle code blocks in HTML code -->
    <%- include('partials/PrettyPrint') %>

    <script src="scripts/memento.js"></script>
  </head>

  <body>
    <!-- Start of Nav Section -->
    <%- include('partials/MainNavBar') %>
    <!-- End of Nav Section -->
    <br />
    <div class="container">
      <h2 title="Memento">Memento</h2>
      <div class="card text-white bg-secondary">
        <div class="card-body">
          <div class="card-title">Intent according to the GoF:</div>
          <p class="card-text">
            "Without violating encapsulation, capture and externalize an
            object's internal state so that the object can be restored to this
            state later. "
          </p>
        </div>
      </div>

      <p>
        The Memento pattern provides temporary storage as well as restoration of
        an object. The mechanism in which you store the object’s state depends
        on the required duration of persistence, which may vary.
      </p>
      <p>
        You could view a database as an implementation of the Memento design
        pattern in which objects are persisted and restored. However, the most
        common reason for using this pattern is to capture a snapshot of an
        object’s state so that any subsequent changes can be undone easily if
        necessary.
      </p>
      <p>
        Essentially, a Memento is a small repository that stores an object’s
        state. Scenarios in which you may want to restore an object into a state
        that existed previously include: saving and restoring the state of a
        player in a computer game or the implementation of an undo operation in
        a database.
      </p>
      <p>
        In JavaScript Mementos are easily implemented by serializing and
        de-serializing objects with JSON.
      </p>

      <div class="card text-white bg-primary mb-3" style="max-width: 25rem">
        <div class="card-body">
          <h4 class="card-title">JavaScript Code</h4>
          <p>
            <img
              src="images/javascript-memento.jpg"
              alt="Memento Diagram"
              class="img-fluid img-thumbnail"
            />
          </p>
        </div>
      </div>

      <p class="text-warning">
        Note: Much of the materials on this page are borrowed from a special
        architecture course by Jack Poorte that I ported with some modification.
      </p>

      <p>
        The sample code creates two persons named Mike and John are created
        using the <span class="cd">Person</span> constructor function. Next,
        their mementos are created which are maintained by the
        <span class="cd">CareTaker</span> object.
      </p>
      <p>
        We assign Mike and John bogus names before restoring them from their
        mementos. Following the restoration we confirm that the person objects
        are back to their original state with valid names.
      </p>
      <p>
        The Memento pattern itself with CareTaker etc. is rarely used in
        JavaScript. However, JSON is a highly effective data format that is
        extremely useful in many different data exchange scenarios.
      </p>

      <p></p>
      <br />
      <div class="alert alert-dismissible alert-primary">
        <h4 class="alert-heading">JavaScript Code</h4>
        <div>
          <!-- Follow these links for the google prettyify information
                    https://github.com/google/code-prettify
                    This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
                    https://github.com/google/code-prettify/blob/master/styles/desert.css -->
          <pre class="prettyprint">
  
            //==============================================
            // memento.js
            //==============================================
            // log helper
            // Used to add() to var log
            // then display in alert box
            // via show() method
            //==============================================
            var log = (function () {
                var log = "";
                return {
                    add: function (msg) { log += msg + "\n"; },
                    show: function () { alert(log); log = ""; }
                }
            })();
            
            // our base object that will hold the data that 
            // will turned into various momento object in JSON form.
            var Person = function (name, street, city, state) {
                this.name = name;
                this.street = street;
                this.city = city;
                this.state = state;
            }
            
            // Functionality that will be managing using the momento object
            Person.prototype = {
                hydrate: function () {
            
                    var memento = JSON.stringify(this);
                    return memento;
                },
                dehydrate: function (memento) {
            
                    var m = JSON.parse(memento);
                    for (var prop in m) this[prop] = m[prop];
                }
            }
            
            var CareTaker = function () {
            
                this.mementos = {};
            
                this.add = function (key, memento) {
                    this.mementos[key] = memento;
                },
                    this.get = function (key) {
                        return this.mementos[key];
                    }
            }
            
            //=============================================
            // run_Memento
            //=============================================
            function run_Memento() {
            
                var mike = new Person("Mike Foley", "1112 Main", "Dallas", "TX");
                var john = new Person("John Wang", "48th Street", "San Jose", "CA");
            
                var caretaker = new CareTaker();
            
                // save state
            
                caretaker.add(1, mike.hydrate());
                caretaker.add(2, john.hydrate());
            
                // mess up their names
            
                mike.name = "King Kong";
                john.name = "Superman";
            
                // restore original state
            
                mike.dehydrate(caretaker.get(1));
                john.dehydrate(caretaker.get(2));
            
                log.add(mike.name);
                log.add(john.name);
            
                log.show();
            }
            
      
                    </pre
          >
        </div>
        <button
          type="button"
          class="btn btn-success"
          onclick="run_Memento();"
        >
          Execute Optimized Memento
        </button>
      </div>

      <p>
        The Namespace pattern is applied to keep the code out of the global
        namespace. Our namespace is named
        <span class="cd">JsGangOfFour.Classic</span>. A Revealing Module named
        <span class="cd">Memento</span> returns (i.e. reveals) only a single
        item: the <span class="cd">makeHydratable</span> method.
      </p>
      <p>
        In this implementation there is no need for a Caretaker; we simply added
        the hydrated Memento dynamically to an object. Then in the dehydrate
        method, the values are simply written back to the instance itself.
      </p>
      <p>
        The <span class="cd">JsGangOfFour</span> object contains the
        <span class="cd">namespace</span> function which constructs namespaces
        non-destructively, that is, if a name already exists it won't overwrite
        it.
      </p>

      <p></p>
      <br />
      <div class="alert alert-dismissible alert-primary">
        <h4 class="alert-heading">Optimized JavaScript Code</h4>
        <div>
          <!-- Follow these links for the google prettyify information
                    https://github.com/google/code-prettify
                    This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
                    https://github.com/google/code-prettify/blob/master/styles/desert.css -->
          <pre class="prettyprint">
  

            //=============================================
            // Memento NameSpace 
            //=============================================
            // JavaScript does not support class-based 
            // inheritance or abstract classes.
            // we must ensure this consistency ourselves
            // that properties and methods match!!!
            //==============================================
            // Create our namespace called "JsGangOfFour".
            //
            // This is based on the NameSpace Pattern and 
            // Module Pattern. This block of code should 
            // be at the top of separate files to better 
            // manage codebase.
            //
            // More importantly creating a structure to 
            // avoid name collisions globally under one varable
            // called JsGangOfFour.
            //==============================================
            var JsGangOfFour = {
                namespace: function (name) {
                    var parts = name.split(".");
                    var ns = this;
            
                    for (var i = 0, len = parts.length; i < len; i++) {
                        ns[parts[i]] = ns[parts[i]] || {};
                        ns = ns[parts[i]];
                    }
            
                    return ns;
                }
            };
            
            //=============================================
            // Classic NameSpace 
            //=============================================
            JsGangOfFour.namespace("Classic").Memento = (function () {
            
                // Functionality that will be managing using the momento object
                var hydratable = {
                    hydrate: function () {
                        this.memento = JSON.stringify(this);
                    },
                    dehydrate: function () {
            
                        if (this.memento) {
                            var m = JSON.parse(this.memento);
                            for (var prop in m) this[prop] = m[prop];
            
                            this.memento = null;
                        }
                    },
            
                    memento: null
                }
            
                var makeHydratable = function (obj) {
                    for (var prop in hydratable) {
                        obj[prop] = hydratable[prop];
                    }
                    return obj;
                };
            
                return {
                    makeHydratable: makeHydratable
                }
            
            
            })();
            
            //=============================================
            // run_OptimizedMemento
            //=============================================
            function run_OptimizedMemento() {
            
                // our base object that will hold the data that 
                // will turned into various momento object in JSON form.
                var Person = function (name, street, city, state) {
                    this.name = name;
                    this.street = street;
                    this.city = city;
                    this.state = state;
                }
            
                var mike = new Person("Mike Foley", "1112 Main", "Dallas", "TX");
                var john = new Person("John Wang", "48th Street", "San Jose", "CA");
            
                JsGangOfFour.Classic.Memento.makeHydratable(mike);
                JsGangOfFour.Classic.Memento.makeHydratable(john);
            
                // save state
            
                mike.hydrate();
                john.hydrate();
            
                // mess up their names
            
                mike.name = "King Kong";
                john.name = "Superman";
            
                // restore original state
            
                mike.dehydrate();
                john.dehydrate();
            
                log.add(mike.name);
                log.add(john.name);
            
                log.show();
            }
            
      
                    </pre
          >
        </div>
        <button
          type="button"
          class="btn btn-success"
          onclick="run_OptimizedMemento();"
        >
          Execute Optimized Memento
        </button>
      </div>
    </div>
    <%- include('partials/MainFooter') %>
  </body>
</html>
