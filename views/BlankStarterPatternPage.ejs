<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>JsGangOFour-Factory Method Pattern</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Bootstrap CSS -->
    <%- include('partials/MainStyles') %>
        <!-- PrettyPrints CSS and JS to handle code blocks in HTML code -->
        <%- include('partials/PrettyPrint') %>

            <script src="scripts/abstractfactory.js"></script>

</head>

<body>
    <!-- Start of Nav Section -->
    <%- include('partials/MainNavBar') %>
<!-- End of Nav Section --> <br>
        <div class="container">
            <h2 title="ReplaceMe">ReplaceMe</h2>
            <p>ReplaceMe
            </p>

            <p>ReplaceMe </p>

            <p>ReplaceMe </p>

            <div class="card text-white bg-primary mb-3" style="max-width: 25rem;">
                <div class="card-body">
                    <h4 class="card-title">JavaScript Code</h4>
                    <p>
                        <img src="images/javascript-abstract-factory.jpg" alt="Abstract Factory Diagram" class="img-fluid img-thumbnail">
                    </p>
                </div>
            </div>

            <p>ReplaceMe</p>

            <p>ReplaceMe </p>


            <p></p>
            <br>
            <div class="alert alert-dismissible alert-primary">
                <h4 class="alert-heading">JavaScript Code</h4>
                <div>
                    <!--       Follow these links for the google prettyify information
https://github.com/google/code-prettify
This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
https://github.com/google/code-prettify/blob/master/styles/desert.css -->
                    <pre class="prettyprint">
  
  //REPLACE THIS WITH CODE FROM JS FILE
  function Employee(name) {
      this.name = name;
      this.say = function () {
          log.add("I am employee " + name);
      };
  }
  
  function EmployeeFactory() {
      this.create = function(name) {
          return new Employee(name);
      };
  }

  function Vendor(name) {
      this.name = name;
      this.say = function () {
          log.add("I am vendor " + name);
      };
  }

  function VendorFactory() {
      this.create = function(name) {
          return new Vendor(name);
      };
  }

  // log helper
  var log = (function () {
      var log = "";
      return {
          add: function (msg) { log += msg + "\n"; },
          show: function () { alert(log); log = ""; }
      }
  })();


  function run_AbstractFactory() {

      var persons = [];
    
      var employeeFactory = new EmployeeFactory();
      var vendorFactory = new VendorFactory();
    
      persons.push(employeeFactory.create("Joan DiSilva"));
      persons.push(employeeFactory.create("Tim O'Neill"));
    
      persons.push(vendorFactory.create("Gerald Watson"));
      persons.push(vendorFactory.create("Nicole McNight"));
    
      for (var i = 0, len = persons.length; i < len; i++) {
          persons[i].say();
      }
    
      log.show();
    }
  </pre>
                </div>
                <button type="button" class="btn btn-success" onclick="run_AbstractFactory();return false;">Execute run_AbstractFactory()</button>
            </div>


            <p></p>
            <br>
            <div class="alert alert-dismissible alert-primary">
                <h4 class="alert-heading">JavaScript Code</h4>
                <div>
                    <!--       Follow these links for the google prettyify information
https://github.com/google/code-prettify
This is the link to the styple for prettyify - We choose Dessert and put in prettify.css
https://github.com/google/code-prettify/blob/master/styles/desert.css -->
                    <pre class="prettyprint">
      //REPLACE THIS WITH CODE FROM JS FILE
      var Patterns = {
          namespace: function (name) {
              var parts = name.split(".");
              var ns = this;
        
              for (var i = 0, len = parts.length; i < len; i++) {
                  ns[parts[i]] = ns[parts[i]] || {};
                  ns = ns[parts[i]];
              }
        
              return ns;
          }
        };
        
        Patterns.namespace("Classic").AbstractFactory = (function () {
        
          var Family = function (name) {
              this.name = name;
              this.say = function () {
                  log.add("My family member name is " + name);
              };
          };
        
          var Pet = function (name) {
              this.name = name;
              this.say = function () {
                  log.add("I'm a pet named " + name);
              };
          };
        
          var FamilyFactory = function () {
              this.create = function (name) {
                  return new Family(name);
              };
          };
        
          var PetFactory = function () {
              this.create = function (name) {
                  return new Pet(name);
              };
          };
        
          return {
              FamilyFactory: FamilyFactory,
              PetFactory: PetFactory
          };
        })();
        
       
        function run_OptimizedAbstractFactory() {

          var abstract = Patterns.Classic.AbstractFactory;
        
          var familyFactory = new abstract.FamilyFactory();
          var petFactory = new abstract.PetFactory();
        
          var persons = [];
        
          persons.push(familyFactory.create("Ron Garlit"));
          persons.push(familyFactory.create("Cindi Garlit"));
          persons.push(familyFactory.create("Devin Garlit"));
          persons.push(familyFactory.create("Melissa Garlit"));
          persons.push(familyFactory.create("Mark Garlit"));
        
          persons.push(petFactory.create("Molly Garlit"));
          persons.push(petFactory.create("Max Garlit"));
          persons.push(petFactory.create("Jax Garlit"));
        
          for (var i = 0, len = persons.length; i < len; i++) {
              persons[i].say();
        }
        
          log.show();
        }          
  </pre>
                </div>
                <button type="button" class="btn btn-success" onclick="run_OptimizedAbstractFactory();return false;">Execute run_OptimizedAbstractFactory()</button>
            </div>

        </div>
        <%- include('partials/MainFooter') %>

</body>

</html>